package soot.android;

import java.util.Iterator;
import java.util.*;
import java.lang.annotation.*;
import java.io.PrintStream;

import soot.Body;
import soot.BodyTransformer;
import soot.Local;
import soot.PackManager;
import soot.PatchingChain;
import soot.RefType;
import soot.Type;
import soot.ArrayType;
import soot.VoidType;
import soot.NullType;
import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import soot.SootField;
import soot.MethodSource;
import soot.Modifier;
import soot.Transform;
import soot.Unit;
import soot.Value;
import soot.util.*;
import soot.jimple.AbstractStmtSwitch;
import soot.jimple.InvokeExpr;
import soot.jimple.InvokeStmt;
import soot.jimple.*;
import soot.jimple.internal.*;
import soot.jimple.Jimple;
import soot.jimple.StringConstant;
import soot.options.Options;
import soot.tagkit.*; 
import soot.intentResolve.IntentFilterRecord;
import soot.intentResolve.intentDB;

public class IntentTransformer extends BodyTransformer {

    private static IntentTransformer instance = new IntentTransformer();

    public static IntentTransformer v() { return instance; }

    private SootClass intentClass;

	class intentInfo{
		public IntentFilterRecord ifr;
		public SootClass intentClass;
		public String targetedClass;
		intentInfo(IntentFilterRecord IFR, SootClass iC, String tC){
			ifr = IFR;
			intentClass = iC;
			targetedClass = tC;
		}
	}

	class intentExtraInfo{
		public String fieldStr;
		public Value argVal;
		public Stmt originalStmt;
		public PatchingChain<Unit> bodyUnit; 

		intentExtraInfo(String fStr, Value aVal, Stmt orStmt, PatchingChain<Unit> bUnit){
			fieldStr = fStr;
			argVal = aVal;
			originalStmt = orStmt;
			bodyUnit = bUnit;
		}
	}
	
	class intentHelper{
		public ArrayList<intentExtraInfo> extraInfos;
		public ArrayList<intentInfo> infos;
		public ArrayList<String> categories;
		public String originClass;
		public SootClass returningIntent;

		intentHelper(){
			extraInfos = new ArrayList<intentExtraInfo>();
			infos = new ArrayList<intentInfo>();
			categories = new ArrayList<String>();
			originClass = "";
			returningIntent = null;
		}
		
	}

    private Map<String, SootClass> targetedIntents = new HashMap<String, SootClass>();

	private Map<SootClass, intentHelper> helpers = new HashMap<SootClass, intentHelper>();

    private String prefix = "edu.rpi.content.";

	private Random rnd = new Random();

    private SootClass getIntentClass() {
        if (intentClass == null) 
            intentClass = Scene.v().getSootClass("android.content.Intent");
        return intentClass;
    }

    private String encode(String s) {
        return prefix + "Intent_" + s.replace('/', '_').replace('.', '_').replace('$', '_');
    }

	private SootClass modIntentTarget(SootClass c, String target, Local base){
		String name = encode(target);
		SootClass targetedC = targetedIntents.get(name);
		System.err.println("	modifying Intent Target:");
		if (targetedC == null){
			//Class with given name is not targeted by any intent
			targetedC = c;
			targetedIntents.put(name, targetedC);
		}
		else{
			base.setType(targetedC.getType());
		}
		return targetedC;

	}


    private SootClass getTargetedIntent(String target) {
        String name = encode(target);
        SootClass sc = targetedIntents.get(name);
        if (sc == null) {
			System.err.println("	intent class not exist, creating");
            sc = new SootClass(name, Modifier.PUBLIC);
            sc.setSuperclass(getIntentClass());
            Scene.v().addClass(sc);
            sc.setApplicationClass();
            targetedIntents.put(name, sc);
        }
		else{
			System.err.println("	class found");
		}
        return sc;
    }

	private SootClass createIntent(Local base){
		SootClass sc = getTargetedIntent(Integer.toString(rnd.nextInt(100000000)));
		base.setType(sc.getType());
		intentHelper iH = new intentHelper();
		helpers.put(sc, iH);
		return sc;		
	}
	private boolean isIntent(Value v){
		boolean result = (v.getType().toString().equals("android.content.Intent")||
							v.getType().toString().startsWith("edu.rpi.content.Intent"));
		return result;
	}

	private void resolveImplicitIntent(SootClass c0, String targetName, Local base){


		ArrayList<IntentFilterRecord> ifrs;
		intentDB.openIntentDB(false);
		ifrs  = intentDB.retrieveFilters(targetName);
		intentHelper iH = helpers.get(c0);
							
		//take care of multi target implicit intents
		System.err.println("resolving implicit intent by action:");
		System.err.println("	action name: " + targetName);
		int tcount=0;
		//SootClass c;
		//SootClass c2 = new SootClass("placeholder");
		for(IntentFilterRecord ifr:ifrs){
			String tcName = ifr.getTarget();
			//c = getTargetedIntent(tcName);
			if(tcount==0){
				c0 = modIntentTarget(c0, tcName, base);
				//base.setType(c.getType());
				//c2 = c;
			}
			else{
				targetedIntents.put(tcName, c0);
			}
			intentInfo ifo = new intentInfo(ifr, c0, tcName);
			iH.infos.add(ifo);
							
			tcount++;
		}
		System.err.println("	components found that can handle the intent: " + tcount);

		return;
	}
		

	/*private IntentFilterRecord putFilter(SootClass c){

	}*/

    public SootField getFieldByName(SootClass sc, String name) {
        for (SootField field : sc.getFields() ) {
            if(field.getName().equals(name)) {
                return field;
            }
        }
        return null;
    }

    public SootMethod getMethodByName(SootClass sc, String name) 
    {
        for (SootMethod method : sc.getMethods()) {
            if(method.getName().equals(name))
            {
                return method;
            }
        }
        return null;
    }

    private Set<SootClass> getSuperTypes(SootClass sc) {
        Set<SootClass> supertypes = new LinkedHashSet<SootClass>();

        Deque<SootClass> stack = new ArrayDeque<SootClass>();
        stack.push(sc);

        while (!stack.isEmpty()) {
            SootClass current = stack.pop();

            if (current.getName().equals("java.lang.Object"))
                continue;

            SootClass c = current.hasSuperclass() ? current.getSuperclass() : null;
            if (c!= null && !supertypes.contains(c)) {
                stack.push(c);
                supertypes.add(c);
            }
            for (SootClass supertype : current.getInterfaces()) {
                if (!supertypes.contains(supertype)) {
                    stack.push(supertype);
                    supertypes.add(supertype);
                }
            }
        }
        return supertypes;
    }

    protected SootMethod getDeclaringMethod(SootMethod method) {
        if (!method.isPhantom())
            return method;
        SootClass sc = method.getDeclaringClass();
        Set<SootClass> superTypes = getSuperTypes(sc);
        for (SootClass superClass : superTypes) {
            if (superClass.declaresMethod(method.getSubSignature())) {
                SootMethod m = superClass.getMethod(method.getSubSignature());
                if (!m.isPhantom())
                    return m;
            }
        }
        return method;
    }

    @Deprecated
    private SootMethod createPutExtrMethod(String name, SootField field) {
        // create method
        SootMethod m = new SootMethod(name, 
                Arrays.asList(new Type[] { RefType.v("java.lang.Object") }),
                VoidType.v(), 
                Modifier.PUBLIC | Modifier.STATIC);

        JimpleBody body = Jimple.v().newBody(m);
        m.setActiveBody(body);
        Chain units = body.getUnits();
        Local arg;
        arg = Jimple.v().newLocal("r0", RefType.v("java.lang.Object"));
        body.getLocals().add(arg);
        units.add(Jimple.v().newIdentityStmt(arg, 
                    Jimple.v().newParameterRef(RefType.v("java.lang.Object"), 0)));
        units.add(Jimple.v().newAssignStmt(
                Jimple.v().newStaticFieldRef(field.makeRef()), arg));
        units.add(Jimple.v().newReturnVoidStmt());

        return m;
    }

    @Deprecated
    private SootMethod createGetExtraMethod(String name, SootField field) {
        // create method
        SootMethod m = new SootMethod(name, 
                Arrays.asList(new Type[] {  }),
                RefType.v("java.lang.Object"), 
                Modifier.PUBLIC | Modifier.STATIC);

        JimpleBody body = Jimple.v().newBody(m);
        m.setActiveBody(body);
        Chain units = body.getUnits();
        Local arg;
        arg = Jimple.v().newLocal("r0", RefType.v("java.lang.Object"));
        body.getLocals().add(arg);
        units.add(Jimple.v().newAssignStmt(arg,
                Jimple.v().newStaticFieldRef(field.makeRef())));
        units.add(Jimple.v().newReturnStmt(arg));

        return m;
    }

    private int containsTargetedIntentArg(InstanceInvokeExpr e) {
        SootMethod invoke = e.getMethod();
        if (!invoke.getName().startsWith("start"))
            return -1;
        for (int i = 0; i < e.getArgCount(); i++) {
            Type t = e.getArg(i).getType();
            if (t instanceof RefType) {
                String encoded = encode(((RefType) t).getClassName());
                if (targetedIntents.containsKey(encoded))
                    return i;
            }
        }
        return -1;
    }

    @Override
    protected void internalTransform(final Body b, String phaseName, 
            @SuppressWarnings("rawtypes") Map options) {
        SootMethod sm = b.getMethod();
        SootClass sc = (sm == null ? null : sm.getDeclaringClass());

        getIntentClass();

        final PatchingChain<Unit> units = b.getUnits();
        for(Iterator<Unit> iter = units.snapshotIterator(); iter.hasNext();) {
            Stmt stmt = (Stmt) iter.next();
			System.err.println("=======stmt: " + stmt.toString());
            if (!stmt.containsInvokeExpr()) 
                continue;

            InvokeExpr e = (InvokeExpr) stmt.getInvokeExpr();
            SootMethod invoke = e.getMethod();
			

            if (stmt instanceof AssignStmt) {
                // Intent.get*Extra()
                if (e instanceof InstanceInvokeExpr) {
            	InstanceInvokeExpr expr = (InstanceInvokeExpr) e;
	            Local base = (Local) expr.getBase();
    	        Type baseType = base.getType();
                    Value left = ((AssignStmt) stmt).getLeftOp();
                    if (baseType instanceof RefType
                            && (baseType.equals(intentClass.getType())  
                                || ((RefType) baseType).getSootClass().hasSuperclass()
                                    &&((RefType) baseType).getSootClass().getSuperclass().getType().equals(intentClass.getType()))
                            && invoke.getName().startsWith("get")
                            && invoke.getName().endsWith("Extra")) {
                        SootClass c = getTargetedIntent(sc.getName());
                        Value arg0 = expr.getArg(0);
                        if (arg0 instanceof StringConstant) {
							//dbg output
							System.err.println("get Extra being processed");

                            String fieldStr = ((StringConstant) arg0).value;
							//
							System.err.println("	field name: "+ fieldStr);

                            SootField sf = getFieldByName(c, fieldStr);
                            if (sf == null) {
                                // create field
								System.err.println("	field not exist, creating");

                                sf = new SootField(fieldStr, RefType.v("java.lang.Object"), 
                                        Modifier.STATIC | Modifier.PUBLIC);
                                c.addField(sf);
                            }
                            Stmt newAssignStmt = Jimple.v().newAssignStmt(left, 
                                    Jimple.v().newStaticFieldRef(sf.makeRef()));
                            units.insertBefore(newAssignStmt, stmt);
                            units.remove(stmt);
                        }
                    }
					else if(baseType instanceof RefType
							&&invoke.getName().startsWith("getIntent")){
						String currentClass = ((RefType)baseType).getSootClass().getType().toString();
						SootClass c = getTargetedIntent(currentClass);
						System.err.println("*****left part type: " + left.getType().toString());
						((Local)left).setType(c.getType());
						if(helpers.get(c)==null){
							intentHelper iH = new intentHelper();
							helpers.put(c, iH);
						}

					}
				}
			}
			else if(e instanceof InstanceInvokeExpr){
			
            	InstanceInvokeExpr expr = (InstanceInvokeExpr) e;
	            Local base = (Local) expr.getBase();
    	        Type baseType = base.getType();


          
        		        // Intent.<init>
                	if (invoke.isConstructor() && baseType.equals(intentClass.getType())) {
					int index;
					
						int i;
       		            for (i = 0; i < invoke.getParameterCount(); i++) {
               		        Type t = invoke.getParameterType(i);
                       		if (t instanceof RefType) {
								//constructor specifies the class that handles the intent, explicit
       		                    if (((RefType) t).getClassName().equals("java.lang.Class")) {
               		                Value arg = expr.getArg(i);
                       		        if (arg instanceof ClassConstant) {
										String targetName = ((ClassConstant) arg).getValue();
	                                    SootClass c = getTargetedIntent(targetName);
       		                            base.setType(c.getType());
										//added for compatibility with implicit intent
										intentHelper iH = new intentHelper();
										helpers.put(c, iH);
	                                    break;
       		                        }
               		            }
                       		}
       		            }
						if(i==invoke.getParameterCount()){
							//no target class specified
					//extract action and uri here
					//resolving implicit intents and return target classes
							SootClass c0 = createIntent(base);
							System.err.println("creating empty intent");
							if(expr.getArgCount()>0){
						//intent not empty, we assume it has an Action specified
								String targetName = ((StringConstant) expr.getArg(0)).value;
								resolveImplicitIntent(c0, targetName, base);
							}
							else{
						//empty constructor, do nothing
								System.err.println("empty intent constructor found, doing nothing!");
							}
						}
               		}
				
			
                // Intent.put*Extra
					else  if (baseType instanceof RefType
                            && ((RefType) baseType).getSootClass().hasSuperclass()
                            && (((RefType) baseType).getSootClass().getSuperclass().getType().equals(intentClass.getType()))
                            && invoke.getName().startsWith("put")
                            && invoke.getName().endsWith("Extra")) {
                    SootClass c = ((RefType) baseType).getSootClass();
                    Value arg0 = expr.getArg(0);
                    Value arg1 = expr.getArg(1);
                    if (arg0 instanceof StringConstant) {
                        String fieldStr = ((StringConstant) arg0).value;
						//stores extra info
						System.err.println("adding extra info to helper");
						System.err.println("	soot class type:" + c.getType().toString());
						intentExtraInfo ieInfo = new intentExtraInfo(fieldStr, arg1, stmt, units);

						intentHelper iH = helpers.get(c);
						iH.extraInfos.add(ieInfo);
						units.remove(stmt);


						//delays the insertion of new Stmt
						/*
                        SootField sf = getFieldByName(c, fieldStr);
                        if (sf == null) {
                            // create field
                            sf = new SootField(fieldStr, RefType.v("java.lang.Object"), 
                                    Modifier.STATIC | Modifier.PUBLIC);
                            c.addField(sf);
                        }
                        Stmt assignStmt = Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(sf.makeRef()), arg1);
                        units.insertBefore(assignStmt, stmt);
                        units.remove(stmt);
						*/
                    }
                }

				//Intent.setAction()

                else if (baseType instanceof RefType
                            && ((RefType) baseType).getSootClass().hasSuperclass()
                            && (((RefType) baseType).getSootClass().getSuperclass().getType().equals(intentClass.getType()))
                            && invoke.getName().startsWith("setAction")){
                    
					Value arg0 = expr.getArg(0);
					SootClass c0 = ((RefType) baseType).getSootClass();
                    String actionStr = ((StringConstant) arg0).value;
					resolveImplicitIntent(c0, actionStr, base);

				}
				

				// Intent.setType
                else if (baseType instanceof RefType
                            && ((RefType) baseType).getSootClass().hasSuperclass()
                            && (((RefType) baseType).getSootClass().getSuperclass().getType().equals(intentClass.getType()))
                            && invoke.getName().startsWith("setType")){


                    SootClass c = ((RefType) baseType).getSootClass();
                    Value arg0 = expr.getArg(0);
                    String typeStr = ((StringConstant) arg0).value;
					intentHelper iH = helpers.get(c);


					for(Iterator<intentInfo> ifoit =iH.infos.iterator();
							ifoit.hasNext();){
						intentInfo ifo = ifoit.next();
						if(ifo.ifr.getDataTypes().size()==0
								||!(ifo.ifr.getDataTypes().contains(typeStr))){
							//type requirement not met
							for(Iterator<Map.Entry<String, SootClass>> it = targetedIntents.entrySet().iterator();
									it.hasNext();){
								Map.Entry<String, SootClass> entry = it.next();
								if(entry.getKey().equals(ifo.ifr.getTarget())
											&& entry.getValue().equals(ifo.targetedClass)){
									it.remove();
									break;
								}
							}
							ifoit.remove();
						}
					}
				}
				
				// startActivity*
                else if (baseType instanceof RefType
                            && expr.getArgCount()>0 
                            && (invoke.getName().startsWith("startActivity")||
                            		invoke.getName().startsWith("startService")||
                            		(invoke.getName().startsWith("send")&& invoke.getName().endsWith("Broadcast"))||
                            		invoke.getName().startsWith("bindService")
                            		)){

					String currentClass = ((RefType)baseType).getSootClass().getType().toString();
					int i;
					Value arg0 = expr.getArg(0);
					for(i=0;i<expr.getArgCount();i++){
						arg0 = expr.getArg(i);
						if(isIntent(arg0)){
							break;
						}
					}
					if(i==expr.getArgCount()){
						continue;
					}

                    
                    SootClass c = ((RefType)(arg0.getType())).getSootClass();
					intentHelper iH = helpers.get(c);
					iH.originClass = currentClass;
					if( iH.returningIntent != null){
						//for result
						targetedIntents.put(currentClass, iH.returningIntent);
					}
					System.err.println("startActivity being processed");
					System.err.println("stmt string: " + invoke.toString());
					System.err.println("baseType: " + currentClass);
					System.err.println("intent argument type: " + arg0.getType().toString());
					//remove filter records that don't meet category requirements

					

					if(iH.infos!=null && iH.categories != null ){
						if(iH.infos.size()>0 && iH.categories.size()>0){
							for(intentInfo ifo:iH.infos){
								int counter = 0;
								for(String cate:iH.categories){
									if(ifo.ifr.getCategories().contains(cate)){
										break;
									}
									counter++;
								}
								if(counter == iH.categories.size()){
								//no matching category exists, remove filter
									for(Iterator<Map.Entry<String,SootClass>> it = targetedIntents.entrySet().iterator();
										it.hasNext();){
										Map.Entry<String, SootClass> entry = it.next();
										if(entry.getKey().equals(ifo.ifr.getTarget())
												&& entry.getValue().equals(ifo.targetedClass)){
											it.remove();
											break;
										}
									}
									iH.infos.remove(ifo);
								}
							}
						}
					}	

					//insert Stmt
					//need more detection

					if(iH.extraInfos.size()>0 ){
						ArrayList<intentInfo> todoList;
						if(iH.infos.size()==0){
							//explicit intent
							System.err.println("	explicit intent");
							todoList = new ArrayList<intentInfo>();
							todoList.add(new intentInfo(new IntentFilterRecord(), c, ""));
						}
						else{
							//implicit
							System.err.println("	implicit intent");
							todoList = iH.infos;
						}
						for(intentInfo ifo:todoList){
							for(intentExtraInfo ieInfo:iH.extraInfos){

                        		SootField sf = getFieldByName(ifo.intentClass , ieInfo.fieldStr);
		                        if (sf == null) {
        		                    // create field
									System.err.println("	extra field not found, creating");
                		            sf = new SootField(ieInfo.fieldStr, RefType.v("java.lang.Object"), 
                        		            Modifier.STATIC | Modifier.PUBLIC);
		                            ifo.intentClass.addField(sf);
        		                }

								System.err.println("	inserting stmt for putExtra");

                		        Stmt assignStmt = 
									Jimple.v().newAssignStmt(
											Jimple.v().newStaticFieldRef(sf.makeRef()),
											ieInfo.argVal
											);
                        		units.insertBefore(assignStmt, stmt);
							}
						}
		                units.remove(stmt);
					}
				}


				




				
				// Intent.addCategory
                else if (baseType instanceof RefType
                            && ((RefType) baseType).getSootClass().hasSuperclass()
                            && (((RefType) baseType).getSootClass().getSuperclass().getType().equals(intentClass.getType()))
                            && invoke.getName().startsWith("addCategory")){

                    SootClass c = ((RefType) baseType).getSootClass();
                    Value arg0 = expr.getArg(0);
					intentHelper iH = helpers.get(c);
                    String categoryStr = ((StringConstant) arg0).value;
					for(Iterator<intentInfo> it = iH.infos.iterator();
										it.hasNext();){
						intentInfo ifo = it.next();
						if(!(ifo.ifr.getCategories().contains(categoryStr))){
							it.remove();
							break;
						}
					}

				}

				//setResult
				else if(baseType instanceof RefType
						&& invoke.getName().startsWith("setResult")
						&& expr.getArgCount()>1){
					
					String currentClass = ((RefType)baseType).getSootClass().getType().toString();
					Value arg0 = expr.getArg(1);
                    SootClass returnedIntent = ((RefType)(arg0.getType())).getSootClass();
					SootClass incomingIntent = getTargetedIntent(currentClass);
					intentHelper iHincoming = helpers.get(incomingIntent);
					
					if(iHincoming != null){
						String origin = new String(iHincoming.originClass);
						System.err.println("	originClass: " + origin);

						returnedIntent = getTargetedIntent(origin);
						//modIntentTarget(returnedIntent, iHincoming.originClass, new JimpleLocal("",returnedIntent.getType()));
					}
					else{
						iHincoming.returningIntent = returnedIntent;
					}
					intentHelper iHreturned = helpers.get(returnedIntent);
					iHreturned.originClass = new String(currentClass);
					for(intentExtraInfo ieInfo:iHreturned.extraInfos){
						SootField sf = getFieldByName(returnedIntent , ieInfo.fieldStr);
		                if (sf == null) {
        		         // create field
						System.err.println("	extra field not found, creating");
                		sf = new SootField(ieInfo.fieldStr, RefType.v("java.lang.Object"), 
                        		            Modifier.STATIC | Modifier.PUBLIC);
		                returnedIntent.addField(sf);
						}

						System.err.println("	inserting stmt for putExtra");

           		        Stmt assignStmt = 
							Jimple.v().newAssignStmt(
									Jimple.v().newStaticFieldRef(sf.makeRef()),
									ieInfo.argVal);
                        units.insertBefore(assignStmt, stmt);
					}
				}



                // Context.startService | Activity.startActivity | and
                // more. Seems not necessary as we have handled
                // put*Extra()
                /*else if ((index = containsTargetedIntentArg(expr)) != -1 ) {
                    Local arg = (Local) expr.getArg(index);
                    Local newArg = Jimple.v().newLocal(arg.getName() + "_intent", NullType.v()); 
                    expr.setArg(index, newArg);
                }*/
                // Replace Handler.sendMessage() with Handler.handleMessage()
                else if ((invoke = getDeclaringMethod(invoke))  != null
                        && invoke.getDeclaringClass().getName().equals("android.os.Handler")
                        && invoke.getName().startsWith("sendMessage")) {
                    Value arg0 = expr.getArg(0);
                    SootClass baseClass = ((RefType) baseType).getSootClass();
                    if (baseClass.declaresMethod("handleMessage", 
                            Arrays.asList(new Type[]{RefType.v("android.os.Message")}))) {
                        SootMethod handleMethod = baseClass.getMethod("handleMessage", 
                                Arrays.asList(new Type[]{RefType.v("android.os.Message")}));
                        Stmt newInvokeStmt = Jimple.v().newInvokeStmt(
                                Jimple.v().newVirtualInvokeExpr(base, handleMethod.makeRef(), arg0));
                        units.insertAfter(newInvokeStmt, stmt);
                    }
                }
                // Replace android.os.AsyncTask.execute() with android.os.AsyncTask.doInBackground()
                else if ((invoke = getDeclaringMethod(invoke))  != null
                        && invoke.getDeclaringClass().getName().equals("android.os.AsyncTask")
                        && invoke.getName().equals("execute")) {
                    Value arg0 = expr.getArg(0);
                    SootClass baseClass = ((RefType) baseType).getSootClass();
                    if (baseClass.declaresMethod("doInBackground", 
                            Arrays.asList(new Type[]{ArrayType.v(RefType.v("java.lang.Object"), 1)}), 
                            RefType.v("java.lang.Object")
                            )) {
                        SootMethod handleMethod = baseClass.getMethod("doInBackground", 
                                Arrays.asList(new Type[]{ArrayType.v(RefType.v("java.lang.Object"), 1)}),
                                RefType.v("java.lang.Object")
                                );
                        Stmt newInvokeStmt = Jimple.v().newInvokeStmt(
                                Jimple.v().newVirtualInvokeExpr(base, handleMethod.makeRef(), arg0));
                        units.insertAfter(newInvokeStmt, stmt);
                    }
                
				}
			}
            
        }
    }
}
