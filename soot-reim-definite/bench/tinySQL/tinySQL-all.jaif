package checkers.javari.quals:
annotation @ReadOnly: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package checkers.javari.quals:
annotation @Mutable: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package checkers.javari.quals:
annotation @PolyRead: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package checkers.javari.quals:
annotation @ThisMutable: @java.lang.annotation.Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

package ORG.as220.tinySQL:
class DBFHeader:

    field TYPE_DB2:

    field TYPE_DB3:

    field TYPE_VISUAL_FOXPRO:

    field TYPE_DB4_SQLTABLE_NOMEMO:

    field TYPE_DB4_SQLSYSTEM_NOMEMO:

    field TYPE_DB3_MEMO:

    field TYPE_DB4_MEMO:

    field TYPE_DB4_SQLTABLE_MEMO:

    field TYPE_FOXPRO2:

    field TYPE_FOXBASE:

    field file_update_year:

    field file_update_month:

    field file_update_day:

    field numFields:

    field numRecords:

    field headerLength:

    field recordLength:

    field encoding:
        type: @checkers.javari.quals.ThisMutable

    field readOnly:

    field BULK_SIZE:

    field FLAG_INDEX:

    field DATE_INDEX:

    field NUMBER_OF_REC_INDEX:

    field LENGTH_OF_HEADER_INDEX:

    field LENGTH_OF_REC_INDEX:

    field RESERVED_INDEX:

    field TABLE_FLAGS:

    field ENCODING_INDEX:

    field DBF_HEADER_SIZE:

    field TABLE_HAS_STRUCTURE_CDX:

    field TABLE_HAS_MEMO_FIELD:

    field TABLE_IS_DATABASE:

    field DBF_COLDEF_SIZE:

    field FIELD_NAME_INDEX:

    field FIELD_TYPE_INDEX:

    field IMU_INDEX:

    field FIELD_LENGTH_INDEX:

    field DECIMAL_COUNT_INDEX:

    field FIELD_FLAGS_INDEX:

    field FIELD_RESERVED_INDEX:

    field FIELD_FLAG_SYSTEM_COLUMN:

    field FIELD_FLAG_IS_NULLABLE:

    field FIELD_FLAG_IS_BINARY:

    field BACKLINK_STRUCTURE_SIZE:

    field fileHeader:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field colHeader:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field coldefsSorted:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field ff:
        type: @checkers.javari.quals.ThisMutable

    field type:

    field autoEncoding:

    method <init>(Ljava/lang/String;Z)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method initializeHeader(Ljava/io/RandomAccessFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/DBFHeader;ILjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
            type: @checkers.javari.quals.Mutable

    method <init>(ISLjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
        parameter #2:
            type: @checkers.javari.quals.Mutable

    method create(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getNumberOfRecords()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getNumberOfFields()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getRecordLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getHeaderLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setType(S)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getFields()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method writeFileHeader(Ljava/io/RandomAccessFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method readFileHeader(Ljava/io/RandomAccessFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method applyFileHeader()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getEncoding()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method resolveEncoding(I)Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead
        parameter #0:

    method transformEncoding(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method writeColHeader(Ljava/io/RandomAccessFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method readColHeader(Ljava/io/RandomAccessFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method mkDataDirectory(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setTimestamp()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method updateNumberOfRecords(ILjava/io/RandomAccessFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setNumRecords(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setNumberOfFields(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method adjustHeaderLength()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method setRecordLength(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setReserved()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method setColDefinitions(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method calculateSize(LORG/as220/tinySQL/tsColumn;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setColdef(ILORG/as220/tinySQL/tsColumn;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getFieldFlags(LORG/as220/tinySQL/tsColumn;)B:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method extractColdef(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method checkFieldAfterRead(SLORG/as220/tinySQL/tsColumn;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method seekNull([BII)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:
        parameter #1:
        parameter #2:

    method typeToLiteral(I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:

    method charToSqlType(C)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method copyDBFHeader(LORG/as220/tinySQL/DBFHeader;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method supportsMemos()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsLogical()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsInteger()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsTimestamp()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class Utils:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method intToLittleEndian(I)[B:
        return: @checkers.javari.quals.Mutable
            inner-type 0:
        parameter #0:

    method shortToLittleEndian(S)[B:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        parameter #0:

    method vax_to_long([B)D:
        return:
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method vax_to_short([B)I:
        return:
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method fixByte(B)S:
        return:
        parameter #0:

    method forceToSize(Ljava/lang/String;IBLjava/lang/String;)[B:
        return: @checkers.javari.quals.Mutable
            inner-type 0:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:
            type: @checkers.javari.quals.Mutable

    method forceToSize(Ljava/lang/String;IC)[C:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method forceToSizeLeft(Ljava/lang/String;IBLjava/lang/String;)[B:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:
            type: @checkers.javari.quals.Mutable

    method forceToSizeLeft(Ljava/lang/String;IC)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method delFile(Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method delFile(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method renameFile(Ljava/lang/String;Ljava/lang/String;)Z:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method stripPathAndExtension(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getAllFiles(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method printResultSet(Ljava/sql/ResultSet;Ljava/io/PrintStream;)I:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method format(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

package ORG.as220.tinySQL:
class Utils$1MyDir:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method createNewFolder(Ljava/io/File;)Ljava/io/File;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getRoots()[Ljava/io/File;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method isHiddenFile(Ljava/io/File;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method isRoot(Ljava/io/File;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class dbfFile:

    field INSERT_DEFAULT:

    field INSERT_SIZE:

    field INSERT_SPEED:

    field dataDir:
        type: @checkers.javari.quals.ThisMutable

    field encoding:
        type: @checkers.javari.quals.ThisMutable

    field autoEnc:

    field readOnly:

    field p:
        type: @checkers.javari.quals.ReadOnly

    field tabletype:

    field deleteMode:

    field insertMode:

    method <init>(Ljava/lang/String;Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setProperties(Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTableType(Ljava/lang/String;)S:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setReadOnly(Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method CreateTable(LORG/as220/tinySQL/sqlparser/CreateTableStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method AlterTableRenameCol(LORG/as220/tinySQL/sqlparser/AlterTableRenameColumnStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method openTable(Ljava/lang/String;)LORG/as220/tinySQL/tinySQLTable;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method db_removeTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method db_renameTable(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method db_createTable(Ljava/lang/String;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method db_copyTableMeta(Ljava/lang/String;Ljava/lang/String;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method DropTable(LORG/as220/tinySQL/sqlparser/DropTableStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class dbfFileConnection:

    field myMetaData:
        type: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/lang/String;Ljava/lang/String;Ljava/sql/Driver;Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.Mutable

    method createDatabaseEngine()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getMetaData()Ljava/sql/DatabaseMetaData;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method setReadOnly(Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method createArrayOf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method createBlob()Ljava/sql/Blob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createClob()Ljava/sql/Clob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createNClob()Ljava/sql/NClob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createSQLXML()Ljava/sql/SQLXML;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createStatement(III)Ljava/sql/Statement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
        parameter #2:

    method createStruct(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getClientInfo()Ljava/util/Properties;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getClientInfo(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getHoldability()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isValid(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
        parameter #2:
        parameter #3:

    method prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
        parameter #2:
        parameter #3:

    method releaseSavepoint(Ljava/sql/Savepoint;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method rollback(Ljava/sql/Savepoint;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setClientInfo(Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setClientInfo(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setHoldability(I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method setSavepoint()Ljava/sql/Savepoint;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setSavepoint(Ljava/lang/String;)Ljava/sql/Savepoint;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class dbfFileConverter:

    field encoding:
        type: @checkers.javari.quals.ThisMutable

    field numberFormat:
        type: @checkers.javari.quals.ThisMutable

    field _defaultZone:
        type: @checkers.javari.quals.ThisMutable

    field DBASE_BASE_DATE:

    field DAY_DIV:

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertBooleanToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Boolean;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertDateToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Date;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertTimeToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Time;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method convertNullToNative(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method convertNumberToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Number;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method leftPadString(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method convertStringToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/String;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToNull(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method convertNativeToBoolean(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Boolean;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToDate(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Date;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toNumber(B)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method convertNativeToTime(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Time;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method convertJDBCToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToString(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method seekEnd([B)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method convertNativeToNumber(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method rightTrim(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertNativeToInteger(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Integer;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertIntegerToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Integer;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToTimestamp(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertTimestampToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Timestamp;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getTimeZone()Ljava/util/TimeZone;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method calcToTime(I)J:
        return:
        parameter #0:

    method calcFromTime(J)I:
        return:
        parameter #0:

package ORG.as220.tinySQL:
class dbfFileDatabaseMetaData:

    method <init>(LORG/as220/tinySQL/tinySQLConnection;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDataDir()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getTypeInfo()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.Mutable
        parameter #3:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method getMaxTableNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseProductVersion()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxBinaryLiteralLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxCharLiteralLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnsInTable()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxRowSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method autoCommitFailureClosesAllResultSets()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getAttributes(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getClientInfoProperties()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseMajorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseMinorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getFunctionColumns(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getFunctions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getJDBCMajorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getJDBCMinorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSetHoldability()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getRowIdLifetime()Ljava/sql/RowIdLifetime;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getSQLStateType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getSchemas(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getSuperTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getSuperTypes(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method locatorsUpdateCopy()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsGetGeneratedKeys()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMultipleOpenResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsNamedParameters()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsResultSetHoldability(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method supportsSavepoints()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsStatementPooling()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsStoredFunctionsUsingCallSyntax()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class dbfFileDriver:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method connect(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method acceptsURL(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <clinit>()V:
        return:

package ORG.as220.tinySQL:
class dbfFileRow:

    field data:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    method <init>(Ljava/util/Vector;LORG/as220/tinySQL/tinySQLConverter;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/dbfFileRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setData([B)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0:

    method getData()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method nativePut(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method nativeGet(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class dbfFileTable:

    field readonly:

    field fullpath:
        type: @checkers.javari.quals.ThisMutable

    field dbfHeader:
        type: @checkers.javari.quals.ThisMutable

    field ftbl:
        type: @checkers.javari.quals.ThisMutable

    field DBF_EXTENSION:
        type: @checkers.javari.quals.ReadOnly

    field IS_DELETED_INDEX:

    field RECORD_IS_DELETED:

    field RECORD_IS_NOT_DELETED:

    field converter:
        type: @checkers.javari.quals.ThisMutable

    field prototype:
        type: @checkers.javari.quals.ThisMutable

    field _rowCount:

    field _headerLength:

    field _recordLength:

    field defaultInsertRow:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field ROW_UNREAD:

    field ROW_DELETED:

    field ROW_NOT_DELETED:

    field deletedRows:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field insertMode:

    method <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable
        parameter #3:
        parameter #4:

    method close()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getConverter()LORG/as220/tinySQL/tinySQLConverter;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getInsertRow()LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method createInsertRow()[B:
        return: @checkers.javari.quals.Mutable
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable

    method updateRow(ILORG/as220/tinySQL/tsRawRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method writeRow(I[B)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0:

    method insertRow(LORG/as220/tinySQL/tsRawRow;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method findDeletedRow()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getNextInsertRow()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method _readRow(I)[B:
        return: @checkers.javari.quals.Mutable
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getRow(I)LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method deleteRow(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method calcRowPos(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isDeleted(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isDeleted([B)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method getRowCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getColumnCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getRecordLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method open_dbf(Ljava/lang/String;Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method setRowCount(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getHeader()LORG/as220/tinySQL/DBFHeader;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.parser:
class ParseException:

    field specialConstructor:

    field currentToken:
        type: @checkers.javari.quals.ThisMutable

    field expectedTokenSequences:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1:

    field tokenImage:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ThisMutable

    field eol:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/parser/Token;[[I[Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1:
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.Mutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getMessage()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method add_escapes(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.parser:
class SimpleCharStream:

    field staticFlag:

    field bufsize:

    field available:

    field tokenBegin:

    field bufpos:

    field bufline:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field bufcolumn:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field column:

    field line:

    field prevCharIsCR:

    field prevCharIsLF:

    field inputStream:
        type: @checkers.javari.quals.ThisMutable

    field buffer:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field maxNextCharInd:

    field inBuf:

    method ExpandBuff(Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method FillBuff()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method BeginToken()C:
        return:
        receiver: @checkers.javari.quals.Mutable

    method UpdateLineColumn(C)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method readChar()C:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getColumn()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getLine()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getEndColumn()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getEndLine()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getBeginColumn()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getBeginLine()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method backup(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method <init>(Ljava/io/Reader;III)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:

    method <init>(Ljava/io/Reader;II)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method <init>(Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInit(Ljava/io/Reader;III)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:

    method ReInit(Ljava/io/Reader;II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method ReInit(Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(Ljava/io/InputStream;III)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:

    method <init>(Ljava/io/InputStream;II)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method <init>(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInit(Ljava/io/InputStream;III)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:

    method ReInit(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInit(Ljava/io/InputStream;II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method GetImage()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method GetSuffix(I)[C:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method Done()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method adjustBeginLineColumn(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

package ORG.as220.tinySQL.parser:
class TinySQLParser:

    field token_source:
        type: @checkers.javari.quals.ThisMutable

    field jj_input_stream:
        type: @checkers.javari.quals.ThisMutable

    field token:
        type: @checkers.javari.quals.ThisMutable

    field jj_nt:
        type: @checkers.javari.quals.ThisMutable

    field jj_gen:

    field jj_la1:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field jj_la1_0:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jj_la1_1:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jj_la1_2:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jj_la1_3:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jj_expentries:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field jj_expentry:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field jj_kind:

    method createBigDecimal(Ljava/lang/String;)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method stripQuote(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getStatement(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method Select(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getSelectMod()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getSelectColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getAlias(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.PolyRead

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getJokerName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getString()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getExpression(I)LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method startTail(LORG/as220/tinySQL/sqlparser/LValue;LORG/as220/tinySQL/sqlparser/Expression;)LORG/as220/tinySQL/sqlparser/Expression;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getLValue(I)LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getOperator()LORG/as220/tinySQL/sqlparser/Operator;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getSelectTables()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getWhereClauseExpression()LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getOrderBy()LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method Update(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method updateSetColsVals(Ljava/util/Vector;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method Insert(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method insertColsVals(Ljava/util/Vector;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method insertSetColsVals(Ljava/util/Vector;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method insertValuesColsVals(Ljava/util/Vector;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getInsertValuesVal()Ljava/util/Vector;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method Delete(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ifExists()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method ifNotExists()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method DropTable(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method CompactTable(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method CreateTable(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getColumnDefinitions()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getColumnDefinition()LORG/as220/tinySQL/sqlparser/ColumnDefinition;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getNumericType(LORG/as220/tinySQL/sqlparser/ColumnDefinition;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getSimpleType(LORG/as220/tinySQL/sqlparser/ColumnDefinition;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getCharType(LORG/as220/tinySQL/sqlparser/ColumnDefinition;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method AlterTable(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method AlterTableAddColumn(LORG/as220/tinySQL/tinySQLStatement;Ljava/lang/String;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method AlterTableDropColumn(LORG/as220/tinySQL/tinySQLStatement;Ljava/lang/String;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method AlterTableRenameColumn(LORG/as220/tinySQL/tinySQLStatement;Ljava/lang/String;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method AlterCreateTable(LORG/as220/tinySQL/tinySQLStatement;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getNames()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method <init>(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInit(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInit(Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/parser/TinySQLParserTokenManager;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInit(LORG/as220/tinySQL/parser/TinySQLParserTokenManager;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method jj_consume_token(I)LORG/as220/tinySQL/parser/Token;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getNextToken()LORG/as220/tinySQL/parser/Token;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getToken(I)LORG/as220/tinySQL/parser/Token;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method generateParseException()LORG/as220/tinySQL/parser/ParseException;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method enable_tracing()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method disable_tracing()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.parser:
class TinySQLParser$AliasedItem:

    field item:
        type: @checkers.javari.quals.ThisMutable

    field alias:
        type: @checkers.javari.quals.ThisMutable

    field this$0:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/parser/TinySQLParser;LORG/as220/tinySQL/sqlparser/LValue;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.parser:
class TinySQLParser$AliasedString:

    field item:
        type: @checkers.javari.quals.ThisMutable

    field alias:
        type: @checkers.javari.quals.ThisMutable

    field this$0:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/parser/TinySQLParser;Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.parser:
class TinySQLParserConstants:

    field EOF:

    field WHITESPACE:

    field LETTER:

    field NON_ZERO_DIGIT:

    field DIGIT:

    field HEX_DIGIT:

    field BINARY_DIGIT:

    field UNSIGNED_INTEGER:

    field EXPONENT_PART:

    field NEWLINE:

    field NONQUOTE_CHARACTER:

    field COMMA:

    field PERIOD:

    field COLON:

    field QUOTE:

    field DQUOTE:

    field SEMICOLON:

    field L_PAREN:

    field R_PAREN:

    field QUEST:

    field ADD:

    field AND:

    field ALL:

    field ALTER:

    field AS:

    field ASC:

    field BY:

    field COLUMN:

    field COMPACT:

    field CREATE:

    field DELETE:

    field DESC:

    field DISTINCT:

    field DROP:

    field EXIST:

    field EXISTS:

    field FROM:

    field GROUP:

    field IF:

    field INSERT:

    field INTO:

    field LIMIT:

    field NOT:

    field NULL:

    field OR:

    field ORDER:

    field RENAME:

    field SELECT:

    field SET:

    field TABLE:

    field TO:

    field UPDATE:

    field VALUES:

    field WHERE:

    field CHAR:

    field INT:

    field NUMERIC:

    field DATE:

    field BOOLEAN:

    field FLOAT:

    field BIT:

    field DECIMAL:

    field DOUBLE:

    field REAL:

    field BIGINT:

    field SMALLINT:

    field TINYINT:

    field VARCHAR:

    field LONGVARCHAR:

    field BINARY:

    field VARBINARY:

    field LONGVARBINARY:

    field TIME:

    field TIMESTAMP:

    field BLOB:

    field CLOB:

    field PLUS:

    field MINUS:

    field MULT:

    field DIV:

    field ASSIGN:

    field EQUALS:

    field NOT_EQUALS:

    field LT_EQUALS:

    field GT_EQUALS:

    field LT:

    field GT:

    field BETWEEN:

    field NBETWEEN:

    field LIKE:

    field IDENTIFIER:

    field QUOTED_IDENTIFIER:

    field STRING_LITERAL:

    field JOKER_IDENTIFIER:

    field QUOTED_JOKER_IDENTIFIER:

    field UNSIGNED_NUMERIC_LITERAL:

    field EXACT_NUMERIC_LITERAL:

    field APPROXIMATE_NUMERIC_LITERAL:

    field EXPONENT:

    field MANTISSA:

    field SIGNED_INTEGER:

    field SIGN:

    field SIGNED_NUMERIC_LITERAL:

    field DEFAULT:

    field tokenImage:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.Mutable

    method <clinit>()V:
        return:

package ORG.as220.tinySQL.parser:
class TinySQLParserTokenManager:

    field debugStream:
        type: @checkers.javari.quals.ReadOnly

    field jjbitVec0:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jjnextStates:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jjstrLiteralImages:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.Mutable

    field lexStateNames:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    field jjtoToken:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field jjtoSkip:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field input_stream:
        type: @checkers.javari.quals.ThisMutable

    field jjrounds:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field jjstateSet:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field curChar:

    field curLexState:

    field defaultLexState:

    field jjnewStateCnt:

    field jjround:

    field jjmatchedPos:

    field jjmatchedKind:

    method setDebugStream(Ljava/io/PrintStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method jjStopAtPos(II)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjMoveStringLiteralDfa0_0()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method jjMoveStringLiteralDfa1_0(JJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjMoveStringLiteralDfa2_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa3_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa4_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa5_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa6_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa7_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa8_0(JJJJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:

    method jjMoveStringLiteralDfa9_0(JJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjMoveStringLiteralDfa10_0(JJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjMoveStringLiteralDfa11_0(JJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjMoveStringLiteralDfa12_0(JJ)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjCheckNAdd(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method jjAddStates(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjCheckNAddTwoStates(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjCheckNAddStates(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method jjCheckNAddStates(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method jjMoveNfa_0(II)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method <init>(LORG/as220/tinySQL/parser/SimpleCharStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/parser/SimpleCharStream;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method ReInit(LORG/as220/tinySQL/parser/SimpleCharStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method ReInitRounds()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method ReInit(LORG/as220/tinySQL/parser/SimpleCharStream;I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method SwitchTo(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method jjFillToken()LORG/as220/tinySQL/parser/Token;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getNextToken()LORG/as220/tinySQL/parser/Token;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method <clinit>()V:
        return:

package ORG.as220.tinySQL.parser:
class Token:

    field kind:

    field beginLine:

    field beginColumn:

    field endLine:

    field endColumn:

    field image:
        type: @checkers.javari.quals.ThisMutable

    field next:
        type: @checkers.javari.quals.ThisMutable

    field specialToken:
        type: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method newToken(I)LORG/as220/tinySQL/parser/Token;:
        return: @checkers.javari.quals.Mutable
        parameter #0:

package ORG.as220.tinySQL.parser:
class TokenMgrError:

    field LEXICAL_ERROR:

    field STATIC_LEXER_ERROR:

    field INVALID_LEXICAL_STATE:

    field LOOP_DETECTED:

    field errorCode:

    method addEscapes(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method LexicalError(ZIIILjava/lang/String;C)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:
        parameter #4:
            type: @checkers.javari.quals.Mutable
        parameter #5:

    method getMessage()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/lang/String;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method <init>(ZIIILjava/lang/String;CI)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
        parameter #2:
        parameter #3:
        parameter #4:
            type: @checkers.javari.quals.Mutable
        parameter #5:
        parameter #6:

package ORG.as220.tinySQL.sqlparser:
class AlterCreateTableStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field cstmt:
        type: @checkers.javari.quals.ThisMutable

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field updateCount:

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getStatement()LORG/as220/tinySQL/tinySQLStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setCreateTableStatement(LORG/as220/tinySQL/sqlparser/CreateTableStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getCreateTableStatement()LORG/as220/tinySQL/sqlparser/CreateTableStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setUpdateCount(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class AlterTableAddColumnStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field columns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field updateCount:

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method addColumn(LORG/as220/tinySQL/sqlparser/ColumnDefinition;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setUpdateCount(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getStatement()LORG/as220/tinySQL/tinySQLStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

package ORG.as220.tinySQL.sqlparser:
class AlterTableDropColumnStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field columns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field updateCount:

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method addColumn(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setUpdateCount(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getStatement()LORG/as220/tinySQL/tinySQLStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

package ORG.as220.tinySQL.sqlparser:
class AlterTableRenameColumnStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field columns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method addColumn(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class AlterTableRenameColumnStatement$RenameColumnTuple:

    field oldcol:
        type: @checkers.javari.quals.ThisMutable

    field newname:
        type: @checkers.javari.quals.ThisMutable

    field this$0:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/AlterTableRenameColumnStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class ColumnDefinition:

    field name:
        type: @checkers.javari.quals.ThisMutable

    field type:

    field size:

    field decimals:

    field nullable:

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setType(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setSize(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setSize(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method getSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDecimals()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setNullable(Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isNullable()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getColumn()LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class ColumnValue:

    field colname:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field column:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method evaluate(LORG/as220/tinySQL/tsRow;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getChildren()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getChildCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getTable()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getColumn()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class CompactTableStatement:

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getStatement()LORG/as220/tinySQL/tinySQLStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class ConditionalStatement:

    method getWhereClause()LORG/as220/tinySQL/sqlparser/WhereClause;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.PolyRead

    method getTables()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class CreateTableStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field columnDefinitions:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTable()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addColumnDefinition(LORG/as220/tinySQL/sqlparser/ColumnDefinition;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getColumnDefinitions()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class DeleteStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field limit:

    field table:
        type: @checkers.javari.quals.ThisMutable

    field whereC:
        type: @checkers.javari.quals.ThisMutable

    field updatecount:

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTables()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setWhereClause(LORG/as220/tinySQL/sqlparser/WhereClause;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getWhereClause()LORG/as220/tinySQL/sqlparser/WhereClause;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getLimit()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class DropTableStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setTable(Ljava/lang/String;Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class EmptyStatement:

    field statement:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Expression:

    field value:
        type: @checkers.javari.quals.ThisMutable

    field addValues:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field transformed:

    method <init>(LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method add(LORG/as220/tinySQL/sqlparser/Operator;LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method insert(LORG/as220/tinySQL/sqlparser/LValue;LORG/as220/tinySQL/sqlparser/Operator;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method evaluate(LORG/as220/tinySQL/tsRow;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isWrapper()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getValueName(LORG/as220/tinySQL/sqlparser/LValue;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getChildren()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getChildCount()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method transformExpression()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method transformExpression(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method mergeExpressions(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getOperator(I)LORG/as220/tinySQL/sqlparser/Operator;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getLValue(I)LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setLValue(ILORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method main([Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Expression$ValueContainer:

    field op:
        type: @checkers.javari.quals.ThisMutable

    field value:
        type: @checkers.javari.quals.ThisMutable

    field this$0:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Expression;LORG/as220/tinySQL/sqlparser/Operator;LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class Function:

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setParameter(ILORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getParameter(I)LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

package ORG.as220.tinySQL.sqlparser:
class InsertStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field updatecount:

    field columns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field tablesCache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field values:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field subselect:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addColumn(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addValues(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method addSelect(LORG/as220/tinySQL/sqlparser/SelectStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method hasSubSelect()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getSelect()LORG/as220/tinySQL/sqlparser/SelectStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.PolyRead
            inner-type 0: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getValues()Ljava/util/Vector;:
        return: @checkers.javari.quals.PolyRead
            inner-type 0: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTables()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class JokerColumnValue:

    field colname:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method evaluate(LORG/as220/tinySQL/tsRow;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTable()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getChildren()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getChildCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class LValue:

    method evaluate(LORG/as220/tinySQL/tsRow;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getChildren()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getChildCount()I:
        return:
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class Operator:

    field AND:
        type: @checkers.javari.quals.Mutable

    field OR:
        type: @checkers.javari.quals.Mutable

    field ADD:
        type: @checkers.javari.quals.Mutable

    field SUB:
        type: @checkers.javari.quals.Mutable

    field MULT:
        type: @checkers.javari.quals.Mutable

    field DIV:
        type: @checkers.javari.quals.Mutable

    field EQUAL:
        type: @checkers.javari.quals.Mutable

    field NEQUAL:
        type: @checkers.javari.quals.Mutable

    field LEQUAL:
        type: @checkers.javari.quals.Mutable

    field GEQUAL:
        type: @checkers.javari.quals.Mutable

    field GREATER:
        type: @checkers.javari.quals.Mutable

    field LESSER:
        type: @checkers.javari.quals.Mutable

    field BETWEEN:
        type: @checkers.javari.quals.Mutable

    field NBETWEEN:
        type: @checkers.javari.quals.Mutable

    field LIKE:
        type: @checkers.javari.quals.Mutable

    field IN:
        type: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method init()V:
        return:

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method compareTo(Ljava/lang/Object;Ljava/lang/Object;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method <clinit>()V:
        return:

package ORG.as220.tinySQL.sqlparser:
class Operator$1:

package ORG.as220.tinySQL.sqlparser:
class Operator$AddOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$AndOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$BetweenOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$DivideOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$EqualOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$GreaterEqualOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$GreaterOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$InOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$LesserEqualOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$LesserOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$LikeOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$MultiplyOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$NotBetweenOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$NotEqualOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$OrOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class Operator$SubtractOperator:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/Operator$1;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class OrderByClause:

    field parent:
        type: @checkers.javari.quals.ThisMutable

    field orderValues:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field orderColumns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/sqlparser/SelectStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addLValue(LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getColumns()Ljava/util/ArrayList;:
        return: @checkers.javari.quals.PolyRead
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.PolyRead

    method getValues()Ljava/util/ArrayList;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class ParameterValue:

    field value:
        type: @checkers.javari.quals.ThisMutable

    field valueSet:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method evaluate(LORG/as220/tinySQL/tsRow;)Ljava/lang/Object;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method isEmpty()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method clear()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method setValue(Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getValue()Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getChildren()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getChildCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class ParserUtils:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getColumnElements(Ljava/util/Vector;LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getParameterElements(Ljava/util/Vector;LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method resolveTableColumns(LORG/as220/tinySQL/sqlparser/LValue;Ljava/util/Vector;)Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method findTableForColumn(Ljava/util/Enumeration;Ljava/lang/String;)LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method findTable(Ljava/lang/String;Ljava/util/Vector;)LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method buildVector(Ljava/util/Enumeration;)Ljava/util/Vector;:
        return: @checkers.javari.quals.PolyRead
            inner-type 0: @checkers.javari.quals.PolyRead
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.PolyRead

    method convertToString(Ljava/lang/Object;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertToBoolean(Ljava/lang/Object;)Ljava/lang/Boolean;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertToNumber(Ljava/lang/Object;)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertToDate(Ljava/lang/Object;)Ljava/sql/Date;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method toNumber(C)I:
        return:
        parameter #0:

    method convertToTime(Ljava/lang/Object;)Ljava/sql/Time;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertToTimestamp(Ljava/lang/Object;)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method typeToLiteral(I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:

package ORG.as220.tinySQL.sqlparser:
class SQLStatement:

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class SQLStatementBatch:

    field statements:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field parent:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getParent()LORG/as220/tinySQL/tinySQLStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method add(LORG/as220/tinySQL/sqlparser/SQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method clear()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method executeAll()[I:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class SelectStatement:

    field MOD_NONE:

    field MOD_ALL:

    field MOD_DISTINCT:

    field whereC:
        type: @checkers.javari.quals.ThisMutable

    field orderC:
        type: @checkers.javari.quals.ThisMutable

    field resultColumns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field tableColumns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field tables:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field myResult:
        type: @checkers.javari.quals.ThisMutable

    field mod:

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addTable(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method addColumn(LORG/as220/tinySQL/sqlparser/LValue;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method resolveJokers(LORG/as220/tinySQL/sqlparser/JokerColumnValue;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addAllTableColumns(LORG/as220/tinySQL/tinySQLTableView;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getModifier()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setModifier(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getTables()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getTableColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getResultColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method setWhereClause(LORG/as220/tinySQL/sqlparser/WhereClause;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getWhereClause()LORG/as220/tinySQL/sqlparser/WhereClause;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setOrderByClause(LORG/as220/tinySQL/sqlparser/OrderByClause;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getOrderByClause()LORG/as220/tinySQL/sqlparser/OrderByClause;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getStatement()LORG/as220/tinySQL/tinySQLStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class StaticValue:

    field value:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method evaluate(LORG/as220/tinySQL/tsRow;)Ljava/lang/Object;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getChildren()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getChildCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.sqlparser:
class UpdateStatement:

    field db:
        type: @checkers.javari.quals.ThisMutable

    field whereC:
        type: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field columns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field values:
        type: @checkers.javari.quals.ThisMutable

    field updateCount:

    method <init>(LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addColumn(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method setValues(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method getValues()LORG/as220/tinySQL/tsResultRow;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTables()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method setTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setWhereClause(LORG/as220/tinySQL/sqlparser/WhereClause;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getWhereClause()LORG/as220/tinySQL/sqlparser/WhereClause;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDatabase()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSet()LORG/as220/tinySQL/tinySQLResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.sqlparser:
class WhereClause:

    field expression:
        type: @checkers.javari.quals.ThisMutable

    field tableColumns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field parent:
        type: @checkers.javari.quals.ThisMutable

    field lastReturnValue:

    field evaluatedOnce:

    field cache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field cachePos:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    method <init>(LORG/as220/tinySQL/sqlparser/ConditionalStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setExpression(LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getExpression()LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method isMatch(LORG/as220/tinySQL/tsRow;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getColumns()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getParameters()Ljava/util/Vector;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFile:

    field DELETE_DEFAULT:

    field DELETE_NONE:

    field DELETE_PACK:

    field INSERT_DEFAULT:

    field INSERT_SIZE:

    field INSERT_SPEED:

    field dataDir:
        type: @checkers.javari.quals.ThisMutable

    field tables:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ReadOnly

    field encoding:
        type: @checkers.javari.quals.ThisMutable

    field readOnly:

    field p:
        type: @checkers.javari.quals.ThisMutable

    field delpref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field delpost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field colpref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field colpost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field rowpref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field rowpost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field tablepref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field tablepost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field defext:
        type: @checkers.javari.quals.ThisMutable

    field tableext:
        type: @checkers.javari.quals.ThisMutable

    field quoting:
        type: @checkers.javari.quals.ThisMutable

    field quotingEngine:
        type: @checkers.javari.quals.ThisMutable

    field deleteMode:

    field insertMode:

    field ignoreLastColumnPostfix:

    field ignoreFirstColumnPrefix:

    method <init>(Ljava/lang/String;Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setProperties(Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method loadTextFileQuoting(Ljava/lang/String;)LORG/as220/tinySQL/textFileQuoting;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getProperties()Ljava/util/Properties;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getQuoting()LORG/as220/tinySQL/textFileQuoting;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method isIgnoringFirstColumnPrefix()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isIgnoringLastColumnPostfix()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDeleteMode()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getInsertMode()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method CreateTable(LORG/as220/tinySQL/sqlparser/CreateTableStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTableExtension()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDefinitionExtension()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getEncoding()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDelPostfix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getDelPrefix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getColumnPostfix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getColumnPrefix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getRowPostfix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getRowPrefix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getTablePostfix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method getTablePrefix()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method db_removeTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method db_renameTable(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method db_createTable(Ljava/lang/String;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method openTable(Ljava/lang/String;)LORG/as220/tinySQL/tinySQLTable;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method mkDataDirectory()V:
        return:
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFileCSVQuoting:

    field separator:
        type: @checkers.javari.quals.ThisMutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method init()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method doQuoting(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method undoQuoting(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isQuotingNeeded(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method applyQuote(Ljava/lang/StringBuffer;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method main([Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method doTest(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFileConnection:

    method <init>(Ljava/lang/String;Ljava/lang/String;Ljava/sql/Driver;Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.Mutable

    method createDatabaseEngine()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getMetaData()Ljava/sql/DatabaseMetaData;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method createArrayOf(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Array;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method createBlob()Ljava/sql/Blob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createClob()Ljava/sql/Clob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createNClob()Ljava/sql/NClob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createSQLXML()Ljava/sql/SQLXML;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createStatement(III)Ljava/sql/Statement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
        parameter #2:

    method createStruct(Ljava/lang/String;[Ljava/lang/Object;)Ljava/sql/Struct;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getClientInfo()Ljava/util/Properties;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getClientInfo(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getHoldability()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isValid(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method prepareCall(Ljava/lang/String;III)Ljava/sql/CallableStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
        parameter #2:
        parameter #3:

    method prepareStatement(Ljava/lang/String;I)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method prepareStatement(Ljava/lang/String;[I)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method prepareStatement(Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method prepareStatement(Ljava/lang/String;III)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
        parameter #2:
        parameter #3:

    method releaseSavepoint(Ljava/sql/Savepoint;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method rollback(Ljava/sql/Savepoint;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setClientInfo(Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setClientInfo(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setHoldability(I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method setSavepoint()Ljava/sql/Savepoint;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setSavepoint(Ljava/lang/String;)Ljava/sql/Savepoint;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class textFileConverter:

    field encoding:
        type: @checkers.javari.quals.ThisMutable

    field numberFormat:
        type: @checkers.javari.quals.ThisMutable

    field quoting:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/lang/String;LORG/as220/tinySQL/textFileQuoting;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertBooleanToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Boolean;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertDateToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Date;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertTimeToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Time;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method convertNullToNative(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method convertNumberToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Number;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method leftPadString(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method convertStringToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/String;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToNull(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method convertNativeToBoolean(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Boolean;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToDate(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Date;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method toNumber(B)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method convertNativeToTime(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Time;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method convertJDBCToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToString(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method seekEnd([B)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method convertNativeToNumber(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFileDatabaseMetaData:

    method <init>(LORG/as220/tinySQL/tinySQLConnection;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDataDir()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getTextFileEngine()LORG/as220/tinySQL/textFile;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getTypeInfo()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.Mutable
        parameter #3:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method getDatabaseProductVersion()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method autoCommitFailureClosesAllResultSets()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getAttributes(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getClientInfoProperties()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseMajorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseMinorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getFunctionColumns(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getFunctions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getJDBCMajorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getJDBCMinorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSetHoldability()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getRowIdLifetime()Ljava/sql/RowIdLifetime;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getSQLStateType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getSchemas(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getSuperTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getSuperTypes(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method locatorsUpdateCopy()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsGetGeneratedKeys()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMultipleOpenResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsNamedParameters()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsResultSetHoldability(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method supportsSavepoints()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsStatementPooling()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsStoredFunctionsUsingCallSyntax()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class textFileDriver:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method connect(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method acceptsURL(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <clinit>()V:
        return:

package ORG.as220.tinySQL:
class textFileExcelCSVQuoting:

    field separator:
        type: @checkers.javari.quals.ThisMutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method init()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method doQuoting(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method undoQuoting(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isQuotingNeeded(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method applyQuote(Ljava/lang/StringBuffer;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method main([Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method doTest(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFileHTMLQuoting:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method doQuoting(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method undoQuoting(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method main([Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method doTest(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFileQuoting:

    field db:
        type: @checkers.javari.quals.ThisMutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setDatabase(LORG/as220/tinySQL/textFile;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDatabase()LORG/as220/tinySQL/textFile;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method init()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method doQuoting(Ljava/lang/String;I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method undoQuoting(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class textFileRow:

    field data:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field cache:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/util/Vector;LORG/as220/tinySQL/tinySQLConverter;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/textFileRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setData([B)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0:

    method getData()[B:
        return: @checkers.javari.quals.PolyRead
            inner-type 0:
        receiver: @checkers.javari.quals.PolyRead

    method nativePut(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method nativeGet(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class textFileTable:

    field dataDir:
        type: @checkers.javari.quals.ThisMutable

    field converter:
        type: @checkers.javari.quals.ThisMutable

    field column_info:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field ftbl:
        type: @checkers.javari.quals.ThisMutable

    field COLUMN_SIZE:

    field COLUMN_TYPE:

    field COLUMN_POS:

    field _record_length:

    field _rowCount:

    field encoding:
        type: @checkers.javari.quals.ThisMutable

    field delpref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field delpost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field colpref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field colpost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field rowpref:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field rowpost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field tablepref:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0:

    field tablepost:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field NOT_DELETED:
        type: @checkers.javari.quals.Mutable
            inner-type 0:

    field IS_DELETED:
        type: @checkers.javari.quals.Mutable
            inner-type 0:

    field defext:
        type: @checkers.javari.quals.ThisMutable

    field tableext:
        type: @checkers.javari.quals.ThisMutable

    field ROW_UNREAD:

    field ROW_DELETED:

    field ROW_NOT_DELETED:

    field deletedRows:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field databaseEngine:
        type: @checkers.javari.quals.ThisMutable

    field deleteMode:

    field insertMode:

    field readonly:

    field ignoreFirst:

    field ignoreLast:

    field prototype:
        type: @checkers.javari.quals.ThisMutable

    field compressTableCalled:

    method <init>(Ljava/lang/String;Ljava/lang/String;LORG/as220/tinySQL/textFile;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

    method setRecordLength(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setRowCount(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getConverter()LORG/as220/tinySQL/tinySQLConverter;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method close()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method findDeletedRow()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getNextInsertRow()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getInsertRow()LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method createInsertRowPrototype()LORG/as220/tinySQL/textFileRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method setRawData([B[BI)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0:
        parameter #2:

    method updateRow(ILORG/as220/tinySQL/tsRawRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method insertRow(LORG/as220/tinySQL/tsRawRow;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getRowCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getColumnCount()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getRow(I)LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getColumn(ILjava/lang/String;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method deleteRow(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method calcRowPosition(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isDeleted(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isDeleted([BI)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:
        parameter #1:

    method readColumnInfo()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method addColumnDefinition(Ljava/lang/String;IIII)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:
        parameter #3:
        parameter #4:

    method typeToLiteral(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getRecordLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <clinit>()V:
        return:

package ORG.as220.tinySQL:
class tinySQL:

    field tables:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable
            inner-type 1: @checkers.javari.quals.ThisMutable

    field connection:
        type: @checkers.javari.quals.ThisMutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getConnection()LORG/as220/tinySQL/tinySQLConnection;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setConnection(LORG/as220/tinySQL/tinySQLConnection;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method parse(LORG/as220/tinySQL/tinySQLStatement;Ljava/lang/String;)LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method SelectStatement(LORG/as220/tinySQL/sqlparser/SelectStatement;)LORG/as220/tinySQL/tsResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method continueQuery(LORG/as220/tinySQL/tsResultSet;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addColumnsToRow(Ljava/util/Vector;LORG/as220/tinySQL/tsPhysicalRow;LORG/as220/tinySQL/tinySQLTableView;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

    method DeleteStatement(LORG/as220/tinySQL/sqlparser/DeleteStatement;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method UpdateStatement(LORG/as220/tinySQL/sqlparser/UpdateStatement;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method InsertStatement(LORG/as220/tinySQL/sqlparser/InsertStatement;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method db_createTable(Ljava/lang/String;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method db_copyTableMeta(Ljava/lang/String;Ljava/lang/String;Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method db_removeTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method db_renameTable(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method CreateTable(LORG/as220/tinySQL/sqlparser/CreateTableStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method AlterTableAddCol(LORG/as220/tinySQL/sqlparser/AlterTableAddColumnStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method AlterCreateTable(LORG/as220/tinySQL/sqlparser/AlterCreateTableStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method AlterTableDropCol(LORG/as220/tinySQL/sqlparser/AlterTableDropColumnStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method findColumn(LORG/as220/tinySQL/tsColumn;Ljava/util/Vector;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method AlterTableRenameCol(LORG/as220/tinySQL/sqlparser/AlterTableRenameColumnStatement;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method DropTable(LORG/as220/tinySQL/sqlparser/DropTableStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method openTable(Ljava/lang/String;)LORG/as220/tinySQL/tinySQLTable;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method closeTable(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getTable(Ljava/lang/String;)LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method CompactTable(LORG/as220/tinySQL/sqlparser/CompactTableStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class tinySQLConnection:

    field tsql:
        type: @checkers.javari.quals.ThisMutable

    field driver:
        type: @checkers.javari.quals.ReadOnly

    field url:
        type: @checkers.javari.quals.ThisMutable

    field user:
        type: @checkers.javari.quals.ReadOnly

    field catalog:
        type: @checkers.javari.quals.ReadOnly

    field isolation:

    field properties:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/lang/String;Ljava/lang/String;Ljava/sql/Driver;Ljava/util/Properties;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.Mutable

    method getUrl()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getUser()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method createStatement()Ljava/sql/Statement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method prepareStatement(Ljava/lang/String;)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method prepareCall(Ljava/lang/String;)Ljava/sql/CallableStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method nativeSQL(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setAutoCommit(Z)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method commit()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method rollback()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method isClosed()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getTinySqlHandle()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getMetaData()Ljava/sql/DatabaseMetaData;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method setReadOnly(Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setCatalog(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getCatalog()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setTransactionIsolation(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getTransactionIsolation()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method disableAutoClose()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getWarnings()Ljava/sql/SQLWarning;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method clearWarnings()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method executeStatement(LORG/as220/tinySQL/sqlparser/SQLStatement;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getAutoCommit()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setAutoClose(Z)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getAutoClose()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method createDatabaseEngine()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getDatabaseEngine()LORG/as220/tinySQL/tinySQL;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method createStatement(II)Ljava/sql/Statement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method prepareStatement(Ljava/lang/String;II)Ljava/sql/PreparedStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
        parameter #2:

    method prepareCall(Ljava/lang/String;II)Ljava/sql/CallableStatement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
        parameter #2:

    method getTypeMap()Ljava/util/Map;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setTypeMap(Ljava/util/Map;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1: @checkers.javari.quals.ReadOnly

    method getProperties()Ljava/util/Properties;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

package ORG.as220.tinySQL:
class tinySQLConverter:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method convertNativeToString(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToBoolean(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Boolean;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToNumber(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToInteger(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Integer;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToBigInteger(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/math/BigInteger;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToShort(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Short;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToByte(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Byte;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToDouble(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Double;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToFloat(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Float;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToDate(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Date;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToTime(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Time;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToTimestamp(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNativeToNull(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method convertNativeToJDBC(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertJDBCToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertNullToNative(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method convertNumberToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Number;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertBigIntegerToNative(LORG/as220/tinySQL/tsColumn;Ljava/math/BigInteger;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertIntegerToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Integer;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertShortToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Short;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertByteToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Byte;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertFloatToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Float;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertDoubleToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Double;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertStringToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/String;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertDateToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Date;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertTimestampToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Timestamp;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method convertTimeToNative(LORG/as220/tinySQL/tsColumn;Ljava/sql/Time;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method convertBooleanToNative(LORG/as220/tinySQL/tsColumn;Ljava/lang/Boolean;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class tinySQLDefaultIndex:

    field table:
        type: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getRowCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method translateRow(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method reverseTranslation(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

package ORG.as220.tinySQL:
class tinySQLDriver:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method acceptsURL(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getPropertyInfo(Ljava/lang/String;Ljava/util/Properties;)[Ljava/sql/DriverPropertyInfo;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getMajorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMinorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method jdbcCompliant()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tinySQLException:

    field inner:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/lang/Exception;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(Ljava/lang/String;Ljava/lang/Exception;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method printStackTrace()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method printStackTrace(Ljava/io/PrintStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method printStackTrace(Ljava/io/PrintWriter;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class tinySQLIndex:

    method getRowCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method translateRow(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method reverseTranslation(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

package ORG.as220.tinySQL:
class tinySQLLookupIndex:

    method lookup(Ljava/lang/Object;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method lookup([Ljava/lang/Object;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getKeyCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tinySQLPreparedStatement:

    field sql:
        type: @checkers.javari.quals.ThisMutable

    field parameters:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field iParameterCount:

    field PARAM_NOT_FOUND:
        type: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method checkValuesFilled()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getMetaData()Ljava/sql/ResultSetMetaData;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method execute()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method executeQuery()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method executeUpdate()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method addBatch()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method clearParameters()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method setArray(ILjava/sql/Array;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setAsciiStream(ILjava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:

    method setBigDecimal(ILjava/math/BigDecimal;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setBinaryStream(ILjava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:

    method setBlob(ILjava/sql/Blob;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setBoolean(IZ)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setByte(IB)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setBytes(I[B)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0:

    method setCharacterStream(ILjava/io/Reader;I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:

    method setClob(ILjava/sql/Clob;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setDate(ILjava/sql/Date;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setDate(ILjava/sql/Date;Ljava/util/Calendar;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method setDouble(ID)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setFloat(IF)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setInt(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setLong(IJ)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setNull(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setNull(IILjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method setObject(ILjava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setObject(ILjava/lang/Object;I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:

    method setObject(ILjava/lang/Object;II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
        parameter #3:

    method setRef(ILjava/sql/Ref;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setShort(IS)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method setString(ILjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setTime(ILjava/sql/Time;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setTime(ILjava/sql/Time;Ljava/util/Calendar;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method setTimestamp(ILjava/sql/Timestamp;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setTimestamp(ILjava/sql/Timestamp;Ljava/util/Calendar;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method setUnicodeStream(ILjava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:

    method getParameterMetaData()Ljava/sql/ParameterMetaData;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setAsciiStream(ILjava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setAsciiStream(ILjava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setBinaryStream(ILjava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setBinaryStream(ILjava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setBlob(ILjava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setBlob(ILjava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setCharacterStream(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setCharacterStream(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setClob(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setClob(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setNCharacterStream(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setNCharacterStream(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setNClob(ILjava/sql/NClob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setNClob(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setNClob(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method setNString(ILjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setRowId(ILjava/sql/RowId;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setSQLXML(ILjava/sql/SQLXML;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method setURL(ILjava/net/URL;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tinySQLResultSet:

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field result:
        type: @checkers.javari.quals.ThisMutable

    field current_row:
        type: @checkers.javari.quals.ThisMutable

    field current_row_index:

    field meta:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tsResultSet;LORG/as220/tinySQL/tinySQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method next()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method wasNull()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getString(I)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getByte(I)B:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getBoolean(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getShort(I)S:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getInt(I)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getLong(I)J:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getFloat(I)F:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getDouble(I)D:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getBigDecimal(II)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method getBytes(I)[B:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getDate(I)Ljava/sql/Date;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getTime(I)Ljava/sql/Time;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getTimestamp(I)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getAsciiStream(I)Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getUnicodeStream(I)Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getBinaryStream(I)Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getCursorName()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getMetaData()Ljava/sql/ResultSetMetaData;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getObject(III)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
        parameter #2:

    method getObject(II)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method getObject(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getString(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getByte(Ljava/lang/String;)B:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getBoolean(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getShort(Ljava/lang/String;)S:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getInt(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getLong(Ljava/lang/String;)J:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getFloat(Ljava/lang/String;)F:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDouble(Ljava/lang/String;)D:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getBigDecimal(Ljava/lang/String;I)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method getBytes(Ljava/lang/String;)[B:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDate(Ljava/lang/String;)Ljava/sql/Date;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTime(Ljava/lang/String;)Ljava/sql/Time;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTimestamp(Ljava/lang/String;)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getAsciiStream(Ljava/lang/String;)Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getUnicodeStream(Ljava/lang/String;)Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getBinaryStream(Ljava/lang/String;)Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getObject(Ljava/lang/String;II)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
        parameter #2:

    method getObject(Ljava/lang/String;I)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:

    method getObject(Ljava/lang/String;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method findColumn(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getWarnings()Ljava/sql/SQLWarning;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method clearWarnings()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getCharacterStream(I)Ljava/io/Reader;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getCharacterStream(Ljava/lang/String;)Ljava/io/Reader;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getBigDecimal(I)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getBigDecimal(Ljava/lang/String;)Ljava/math/BigDecimal;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isBeforeFirst()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isAfterLast()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isFirst()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isLast()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method beforeFirst()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method afterLast()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method first()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method last()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getRow()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method absolute(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method relative(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method previous()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setFetchDirection(I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getFetchDirection()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setFetchSize(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getFetchSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getConcurrency()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method rowUpdated()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method rowInserted()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method rowDeleted()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method updateNull(I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method updateBoolean(IZ)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateByte(IB)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateShort(IS)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateInt(II)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateLong(IJ)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateFloat(IF)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateDouble(ID)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method updateBigDecimal(ILjava/math/BigDecimal;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateString(ILjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBytes(I[B)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method updateDate(ILjava/sql/Date;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateTime(ILjava/sql/Time;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateTimestamp(ILjava/sql/Timestamp;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateAsciiStream(ILjava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateBinaryStream(ILjava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateCharacterStream(ILjava/io/Reader;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateObject(ILjava/lang/Object;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateObject(ILjava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNull(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method updateBoolean(Ljava/lang/String;Z)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateByte(Ljava/lang/String;B)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateShort(Ljava/lang/String;S)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateInt(Ljava/lang/String;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateLong(Ljava/lang/String;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateFloat(Ljava/lang/String;F)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateDouble(Ljava/lang/String;D)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method updateBigDecimal(Ljava/lang/String;Ljava/math/BigDecimal;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateString(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBytes(Ljava/lang/String;[B)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method updateDate(Ljava/lang/String;Ljava/sql/Date;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateTime(Ljava/lang/String;Ljava/sql/Time;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateTimestamp(Ljava/lang/String;Ljava/sql/Timestamp;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateAsciiStream(Ljava/lang/String;Ljava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateBinaryStream(Ljava/lang/String;Ljava/io/InputStream;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateCharacterStream(Ljava/lang/String;Ljava/io/Reader;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateObject(Ljava/lang/String;Ljava/lang/Object;I)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateObject(Ljava/lang/String;Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method insertRow()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method updateRow()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method deleteRow()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method refreshRow()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method cancelRowUpdates()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method moveToInsertRow()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method moveToCurrentRow()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getStatement()Ljava/sql/Statement;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getObject(ILjava/util/Map;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1: @checkers.javari.quals.ReadOnly

    method getRef(I)Ljava/sql/Ref;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getBlob(I)Ljava/sql/Blob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getClob(I)Ljava/sql/Clob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getArray(I)Ljava/sql/Array;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getObject(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1: @checkers.javari.quals.ReadOnly

    method getRef(Ljava/lang/String;)Ljava/sql/Ref;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getBlob(Ljava/lang/String;)Ljava/sql/Blob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getClob(Ljava/lang/String;)Ljava/sql/Clob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getArray(Ljava/lang/String;)Ljava/sql/Array;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getDate(ILjava/util/Calendar;)Ljava/sql/Date;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getDate(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getTime(ILjava/util/Calendar;)Ljava/sql/Time;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getTime(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getTimestamp(ILjava/util/Calendar;)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getTimestamp(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getHoldability()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getNCharacterStream(I)Ljava/io/Reader;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getNCharacterStream(Ljava/lang/String;)Ljava/io/Reader;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getNClob(I)Ljava/sql/NClob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getNClob(Ljava/lang/String;)Ljava/sql/NClob;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getNString(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getNString(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getRowId(I)Ljava/sql/RowId;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getRowId(Ljava/lang/String;)Ljava/sql/RowId;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getSQLXML(I)Ljava/sql/SQLXML;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getSQLXML(Ljava/lang/String;)Ljava/sql/SQLXML;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getURL(I)Ljava/net/URL;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getURL(Ljava/lang/String;)Ljava/net/URL;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method isClosed()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method updateArray(ILjava/sql/Array;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateArray(Ljava/lang/String;Ljava/sql/Array;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateAsciiStream(ILjava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateAsciiStream(Ljava/lang/String;Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateAsciiStream(ILjava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateAsciiStream(Ljava/lang/String;Ljava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateBinaryStream(ILjava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBinaryStream(Ljava/lang/String;Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBinaryStream(ILjava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateBinaryStream(Ljava/lang/String;Ljava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateBlob(ILjava/sql/Blob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBlob(Ljava/lang/String;Ljava/sql/Blob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBlob(ILjava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBlob(Ljava/lang/String;Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateBlob(ILjava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateBlob(Ljava/lang/String;Ljava/io/InputStream;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateCharacterStream(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateCharacterStream(Ljava/lang/String;Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateCharacterStream(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateCharacterStream(Ljava/lang/String;Ljava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateClob(ILjava/sql/Clob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateClob(Ljava/lang/String;Ljava/sql/Clob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateClob(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateClob(Ljava/lang/String;Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateClob(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateClob(Ljava/lang/String;Ljava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateNCharacterStream(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNCharacterStream(Ljava/lang/String;Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNCharacterStream(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateNCharacterStream(Ljava/lang/String;Ljava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateNClob(ILjava/sql/NClob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNClob(Ljava/lang/String;Ljava/sql/NClob;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNClob(ILjava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNClob(Ljava/lang/String;Ljava/io/Reader;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNClob(ILjava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateNClob(Ljava/lang/String;Ljava/io/Reader;J)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:

    method updateNString(ILjava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateNString(Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateRef(ILjava/sql/Ref;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateRef(Ljava/lang/String;Ljava/sql/Ref;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateRowId(ILjava/sql/RowId;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateRowId(Ljava/lang/String;Ljava/sql/RowId;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateSQLXML(ILjava/sql/SQLXML;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method updateSQLXML(Ljava/lang/String;Ljava/sql/SQLXML;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tinySQLResultSetMetaData:

    field result:
        type: @checkers.javari.quals.ReadOnly

    field colDefs:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    field size:

    method <init>(LORG/as220/tinySQL/tsResultSet;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getColumnCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isAutoIncrement(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isCaseSensitive(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isSearchable(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isCurrency(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isNullable(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isSigned(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getColumnDisplaySize(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getColumnLabel(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getColumnName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getSchemaName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getPrecision(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getScale(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getTableName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getCatalogName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getColumnType(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getColumnTypeName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isReadOnly(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isWritable(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isDefinitelyWritable(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getColumnClassName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tinySQLStatement:

    field statement:
        type: @checkers.javari.quals.ThisMutable

    field results:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field connection:
        type: @checkers.javari.quals.ThisMutable

    field result:
        type: @checkers.javari.quals.ReadOnly

    field max_field_size:

    field max_rows:

    field timeout:

    field fetchsize:

    field defaultResultSetType:

    field defaultDirection:

    field batch:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLConnection;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method executeUpdate(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method execute(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getResultSet()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method onCreateResultSet(LORG/as220/tinySQL/tinySQLResultSet;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method onCloseResultSet(LORG/as220/tinySQL/tinySQLResultSet;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getUpdateCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxFieldSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setMaxFieldSize(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getMaxRows()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setMaxRows(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setEscapeProcessing(Z)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getQueryTimeout()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setQueryTimeout(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method cancel()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getWarnings()Ljava/sql/SQLWarning;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method clearWarnings()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setCursorName(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method setFetchDirection(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getFetchDirection()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setFetchSize(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getFetchSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSetConcurrency()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getResultSetType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setDefaultResultSetType(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method addBatch(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method addBatch(LORG/as220/tinySQL/sqlparser/SQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method clearBatch()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method executeBatch()[I:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable

    method getConnection()Ljava/sql/Connection;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getStatement()LORG/as220/tinySQL/sqlparser/SQLStatement;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setStatement(LORG/as220/tinySQL/sqlparser/SQLStatement;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isWrapperFor(Ljava/lang/Class;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method unwrap(Ljava/lang/Class;)Ljava/lang/Object;:
        bound 0 &0: @checkers.javari.quals.ReadOnly
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method execute(Ljava/lang/String;I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method execute(Ljava/lang/String;[I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method execute(Ljava/lang/String;[Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method executeUpdate(Ljava/lang/String;I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:

    method executeUpdate(Ljava/lang/String;[I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method executeUpdate(Ljava/lang/String;[Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.ReadOnly

    method getGeneratedKeys()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method getResultSetHoldability()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isClosed()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isPoolable()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setPoolable(Z)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

package ORG.as220.tinySQL:
class tinySQLTable:

    field table:
        type: @checkers.javari.quals.ThisMutable

    field converter:
        type: @checkers.javari.quals.ReadOnly

    field views:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method createdView(LORG/as220/tinySQL/tinySQLTableView;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method removedView(LORG/as220/tinySQL/tinySQLTableView;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getViews()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getViewCount()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getConverter()LORG/as220/tinySQL/tinySQLConverter;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method close()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getColumnCount()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getRowCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method updateRow(ILORG/as220/tinySQL/tsRawRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getRow(I)LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method insertRow(LORG/as220/tinySQL/tsRawRow;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method deleteRow(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isDeleted(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getInsertRow()LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method getUpdateRow(I)LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

package ORG.as220.tinySQL:
class tinySQLTableView:

    field colcache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ThisMutable

    field table:
        type: @checkers.javari.quals.ThisMutable

    field _currentRowNumber:

    field _currentRow:
        type: @checkers.javari.quals.ThisMutable

    field alias:
        type: @checkers.javari.quals.ThisMutable

    field tsColumnCache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field isClosed:

    field index:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tinySQLTable;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tinySQLTable;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getColumnName(I)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method findColumn(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isDeleted()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method updateRow(LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method insertRow(LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method convertRowToNative(LORG/as220/tinySQL/tsRow;LORG/as220/tinySQL/tsRawRow;)LORG/as220/tinySQL/tsRawRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getAlias()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setAlias(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setCurrentRow(ILORG/as220/tinySQL/tsRawRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method next()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method nextNonDeleted()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method refresh()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method loadRow(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method beforeFirst()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method isBeforeFirst()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method absolute(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method relative(I)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method last()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method afterLast()Z:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getColumnCount()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getRowCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getColumn(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getColumn(Ljava/lang/String;)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getCurrentRecordNumber()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method deleteRow()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method equals(Ljava/lang/Object;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setIndex(LORG/as220/tinySQL/tinySQLIndex;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getIndex()LORG/as220/tinySQL/tinySQLIndex;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tinySqlDatabaseMetaData:

    field connection:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLConnection;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method allProceduresAreCallable()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method allTablesAreSelectable()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getURL()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getUserName()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method isReadOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nullsAreSortedHigh()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nullsAreSortedLow()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nullsAreSortedAtStart()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nullsAreSortedAtEnd()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseProductName()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDatabaseProductVersion()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDriverName()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDriverVersion()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getDriverMajorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDriverMinorVersion()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method usesLocalFiles()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method usesLocalFilePerTable()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMixedCaseIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method storesUpperCaseIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method storesLowerCaseIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method storesMixedCaseIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMixedCaseQuotedIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method storesUpperCaseQuotedIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method storesLowerCaseQuotedIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method storesMixedCaseQuotedIdentifiers()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getIdentifierQuoteString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getSQLKeywords()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getNumericFunctions()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getStringFunctions()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getSystemFunctions()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getTimeDateFunctions()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getSearchStringEscape()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getExtraNameCharacters()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method supportsAlterTableWithAddColumn()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsAlterTableWithDropColumn()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsColumnAliasing()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nullPlusNonNullIsNull()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsConvert()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsConvert(II)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method supportsTableCorrelationNames()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsDifferentTableCorrelationNames()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsExpressionsInOrderBy()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsOrderByUnrelated()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsGroupBy()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsGroupByUnrelated()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsGroupByBeyondSelect()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsLikeEscapeClause()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMultipleResultSets()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMultipleTransactions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsNonNullableColumns()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsMinimumSQLGrammar()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCoreSQLGrammar()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsExtendedSQLGrammar()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsANSI92EntryLevelSQL()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsANSI92IntermediateSQL()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsANSI92FullSQL()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsIntegrityEnhancementFacility()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsOuterJoins()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsFullOuterJoins()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsLimitedOuterJoins()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getSchemaTerm()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getProcedureTerm()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getCatalogTerm()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method isCatalogAtStart()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getCatalogSeparator()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSchemasInDataManipulation()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSchemasInProcedureCalls()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSchemasInTableDefinitions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSchemasInIndexDefinitions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSchemasInPrivilegeDefinitions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCatalogsInDataManipulation()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCatalogsInProcedureCalls()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCatalogsInTableDefinitions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCatalogsInIndexDefinitions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCatalogsInPrivilegeDefinitions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsPositionedDelete()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsPositionedUpdate()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSelectForUpdate()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsStoredProcedures()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSubqueriesInComparisons()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSubqueriesInExists()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSubqueriesInIns()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsSubqueriesInQuantifieds()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsCorrelatedSubqueries()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsUnion()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsUnionAll()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsOpenCursorsAcrossCommit()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsOpenCursorsAcrossRollback()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsOpenStatementsAcrossCommit()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsOpenStatementsAcrossRollback()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxBinaryLiteralLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxCharLiteralLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnsInGroupBy()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnsInIndex()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnsInOrderBy()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnsInSelect()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxColumnsInTable()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxConnections()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxCursorNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxIndexLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxSchemaNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxProcedureNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxCatalogNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxRowSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method doesMaxRowSizeIncludeBlobs()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxStatementLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxStatements()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxTableNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxTablesInSelect()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMaxUserNameLength()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDefaultTransactionIsolation()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsTransactions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsTransactionIsolationLevel(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method supportsDataDefinitionAndDataManipulationTransactions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method supportsDataManipulationTransactionsOnly()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method dataDefinitionCausesTransactionCommit()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method dataDefinitionIgnoredInTransactions()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getProcedures(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getProcedureColumns(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getTables(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.Mutable
        parameter #3:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method getSchemas()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getCatalogs()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getTableTypes()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getColumns(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.Mutable
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getColumnPrivileges(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly

    method getTablePrivileges(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getBestRowIdentifier(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
        parameter #4:

    method getVersionColumns(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getPrimaryKeys(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getImportedKeys(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getExportedKeys(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly

    method getCrossReference(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly
        parameter #4:
            type: @checkers.javari.quals.ReadOnly
        parameter #5:
            type: @checkers.javari.quals.ReadOnly

    method getTypeInfo()Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getIndexInfo(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
        parameter #4:

    method supportsResultSetType(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method supportsResultSetConcurrency(II)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method ownUpdatesAreVisible(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method ownDeletesAreVisible(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method ownInsertsAreVisible(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method othersUpdatesAreVisible(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method othersDeletesAreVisible(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method othersInsertsAreVisible(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method updatesAreDetected(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method deletesAreDetected(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method insertsAreDetected(I)Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method supportsBatchUpdates()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getUDTs(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[I)Ljava/sql/ResultSet;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly
        parameter #2:
            type: @checkers.javari.quals.ReadOnly
        parameter #3:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0:

    method getConnection()Ljava/sql/Connection;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

package ORG.as220.tinySQL:
class tsColumn:

    field COL_DATA:

    field COL_EXPR:

    field COL_INVALID:

    field expression:
        type: @checkers.javari.quals.ThisMutable

    field physName:
        type: @checkers.javari.quals.ThisMutable

    field displayName:
        type: @checkers.javari.quals.ThisMutable

    field fqname:
        type: @checkers.javari.quals.ThisMutable

    field datatype:

    field decimalPlaces:

    field defaultVal:
        type: @checkers.javari.quals.ThisMutable

    field notNull:

    field bytePos:

    field tablePos:

    field resultPos:

    field size:

    field coltype:

    field table:
        type: @checkers.javari.quals.ThisMutable

    method <init>(LORG/as220/tinySQL/tinySQLTableView;Ljava/lang/String;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tinySQLTableView;Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <init>(Ljava/lang/String;LORG/as220/tinySQL/sqlparser/LValue;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <init>(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tsColumn;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tinySQLTableView;LORG/as220/tinySQL/tsColumn;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method setAll(LORG/as220/tinySQL/tsColumn;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getPhysicalName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getDisplayName()Ljava/lang/String;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getFQName()Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method setPhysicalName(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getDefaultValue()Ljava/lang/Object;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method setDefaultValue(Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setType(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method isNullable()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setNullable(Z)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setSize(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method setSize(II)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method getSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getDecimalPlaces()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setResultPosition(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getResultPosition()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setBytePosition(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getBytePosition()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getTablePosition()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method setTablePosition(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method getColumnType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getTable()LORG/as220/tinySQL/tinySQLTableView;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getExpression()LORG/as220/tinySQL/sqlparser/LValue;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method equals(Ljava/lang/Object;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method isValidName(Ljava/lang/String;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method formColname(Ljava/lang/String;LORG/as220/tinySQL/tinySQLTableView;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class tsPhysicalRow:

    field data:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field coldefs:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tsPhysicalRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method get(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method put(ILjava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead
        parameter #0:

    method getAllDefinitions()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method size()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method refresh()V:
        return:
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class tsRawRow:

    field cache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field converter:
        type: @checkers.javari.quals.ThisMutable

    method <init>(Ljava/util/Vector;LORG/as220/tinySQL/tinySQLConverter;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tsRawRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method putNative(ILjava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method getNative(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method clearCache()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method get(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method put(ILjava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method nativeGet(LORG/as220/tinySQL/tsColumn;)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method nativePut(LORG/as220/tinySQL/tsColumn;Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tsResultRow:

    field prototype:
        type: @checkers.javari.quals.ReadOnly

    field row:
        type: @checkers.javari.quals.ThisMutable

    field myColumns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field cache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field translationTable:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    field evalStack:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    method <init>(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method <init>(Ljava/util/Vector;LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method init(Ljava/util/Vector;LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(LORG/as220/tinySQL/tsResultRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setParent(LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method lookup(I)I:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method get(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead
        parameter #0:

    method size()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method refresh()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method toString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL:
class tsResultSet:

    field ROWS_NOT_KNOWN:

    field rows:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field fetchsize:

    field windowStart:

    field level:

    field rowsMax:

    field dbengine:
        type: @checkers.javari.quals.ReadOnly

    field type:

    field eof:

    field hasReadResults:

    field rowPrototype:
        type: @checkers.javari.quals.ThisMutable

    field resultRowPrototype:
        type: @checkers.javari.quals.ThisMutable

    field whereC:
        type: @checkers.javari.quals.ThisMutable

    field tableColumns:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ThisMutable

    field tables:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ThisMutable

    field resultRow:
        type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tsPhysicalRow;Ljava/util/Vector;Ljava/util/Hashtable;LORG/as220/tinySQL/sqlparser/WhereClause;LORG/as220/tinySQL/tinySQL;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly
                inner-type 1: @checkers.javari.quals.Mutable
        parameter #3:
            type: @checkers.javari.quals.Mutable
        parameter #4:
            type: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tsPhysicalRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setType(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getType()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setFetchSize(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getFetchSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getMoreResults(II)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:

    method isEOF()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method createPhysicalRow()LORG/as220/tinySQL/tsPhysicalRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable

    method addPhysicalRow(LORG/as220/tinySQL/tsPhysicalRow;)Z:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getLevel()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getWhereClause()LORG/as220/tinySQL/sqlparser/WhereClause;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getColumnCount()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method findColumn(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getTables()Ljava/util/Vector;:
        return: @checkers.javari.quals.PolyRead
            inner-type 0: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getColumns()Ljava/util/Hashtable;:
        return: @checkers.javari.quals.PolyRead
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method getCacheSize()I:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getResultRowAt(I)LORG/as220/tinySQL/tsResultRow;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method close()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method getResultSize()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tsRow:

    field colcache:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.ThisMutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(LORG/as220/tinySQL/tsRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method findColumn(Ljava/lang/String;)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getColumnDefinition(I)LORG/as220/tinySQL/tsColumn;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead
        parameter #0:

    method get(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method refresh()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method size()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL:
class tsWeakPhysicalRow:

    field views:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ThisMutable

    field viewPositions:
        type: @checkers.javari.quals.ThisMutable
            inner-type 0:

    method put(ILjava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.ReadOnly

    method get(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method refresh(I)Ljava/lang/Object;:
        return: @checkers.javari.quals.Mutable
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method <init>(LORG/as220/tinySQL/tsPhysicalRow;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <init>(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.Mutable

    method setRowPositions(Ljava/util/Vector;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0: @checkers.javari.quals.ReadOnly

    method refresh()V:
        return:
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.util:
class ArrayEnumeration:

    field objectarray:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.ThisMutable

    field counter:

    method <init>([Ljava/lang/Object;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly
                inner-type 0: @checkers.javari.quals.Mutable

    method hasMoreElements()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nextElement()Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.util:
class CSVParser:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method quote(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method unquote(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.util:
class CharEntityTable:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method createTable()Ljava/util/Properties;:
        return: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.util:
class CharacterEntityParser:

    field parser:
        type: @checkers.javari.quals.ReadOnly

    field entities:
        type: @checkers.javari.quals.Mutable

    field chars:
        type: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.ReadOnly
            inner-type 1: @checkers.javari.quals.Mutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method getCharacter(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method parseEntityValue(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method quoteString(Ljava/lang/String;)Ljava/lang/String;:
        return: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method <clinit>()V:
        return:

package ORG.as220.tinySQL.util:
class EmptyEnumeration:

    field singleton:
        type: @checkers.javari.quals.Mutable

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method hasMoreElements()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method nextElement()Ljava/lang/Object;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method getEnum()Ljava/util/Enumeration;:
        return: @checkers.javari.quals.Mutable
            inner-type 0: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.util:
class Log:

    field logSystemOut:

    field ERROR:

    field WARN:

    field INFO:

    field DEBUG:

    field levels:
        type: @checkers.javari.quals.ReadOnly
            inner-type 0: @checkers.javari.quals.Mutable

    field debuglevel:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method log(ILjava/lang/String;)V:
        return:
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method log(ILjava/lang/String;Ljava/lang/Exception;)V:
        return:
        parameter #0:
        parameter #1:
            type: @checkers.javari.quals.Mutable
        parameter #2:
            type: @checkers.javari.quals.Mutable

    method debug(Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method debug(Ljava/lang/String;Ljava/lang/Exception;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method info(Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method info(Ljava/lang/String;Ljava/lang/Exception;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method warn(Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method warn(Ljava/lang/String;Ljava/lang/Exception;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method error(Ljava/lang/String;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method error(Ljava/lang/String;Ljava/lang/Exception;)V:
        return:
        parameter #0:
            type: @checkers.javari.quals.Mutable
        parameter #1:
            type: @checkers.javari.quals.Mutable

    method <clinit>()V:
        return:

package ORG.as220.tinySQL.util:
class ParameterPosition:

    field iStart:

    field iEnd:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(II)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
        parameter #1:

    method setStart(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getStart()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setEnd(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getEnd()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

package ORG.as220.tinySQL.util:
class StatementParameter:

    field iId:

    field isValue:
        type: @checkers.javari.quals.ReadOnly

    field stValue:
        type: @checkers.javari.quals.ReadOnly

    field bIsStream:

    field ppPosition:
        type: @checkers.javari.quals.ReadOnly

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method init()V:
        return:
        receiver: @checkers.javari.quals.Mutable

    method setId(I)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:

    method getId()I:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setStreamValue(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getStreamValue()Ljava/io/InputStream;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method setValue(Ljava/lang/String;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getValue()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method isStream()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method setPosition(LORG/as220/tinySQL/util/ParameterPosition;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method getPosition()LORG/as220/tinySQL/util/ParameterPosition;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.ReadOnly

    method isEmpty()Z:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method clear()V:
        return:
        receiver: @checkers.javari.quals.Mutable

package ORG.as220.tinySQL.util:
class StreamFilter:

    field isValue:
        type: @checkers.javari.quals.ThisMutable

    field BLOCK_SIZE:

    method <init>()V:
        return:
        receiver: @checkers.javari.quals.ReadOnly

    method <init>(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method setValue(Ljava/io/InputStream;)V:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method getValue()Ljava/io/InputStream;:
        return: @checkers.javari.quals.PolyRead
        receiver: @checkers.javari.quals.PolyRead

    method StreamToBytes()[B:
        return: @checkers.javari.quals.Mutable
            inner-type 0:
        receiver: @checkers.javari.quals.Mutable

    method bytesToString()Ljava/lang/String;:
        return: @checkers.javari.quals.ReadOnly
        receiver: @checkers.javari.quals.Mutable

    method objectToBytes(Ljava/lang/Object;)Ljava/io/ByteArrayInputStream;:
        return: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.Mutable

    method readerToBytes(Ljava/io/Reader;)Ljava/io/ByteArrayInputStream;:
        return: @checkers.javari.quals.ReadOnly
        parameter #0:
            type: @checkers.javari.quals.ReadOnly

    method checkByteOK(B)B:
        return:
        receiver: @checkers.javari.quals.ReadOnly
        parameter #0:

    method readBlock([B)I:
        return:
        receiver: @checkers.javari.quals.Mutable
        parameter #0:
            type: @checkers.javari.quals.Mutable
                inner-type 0:

