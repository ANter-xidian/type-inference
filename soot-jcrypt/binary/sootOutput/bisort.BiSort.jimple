public class bisort.BiSort extends java.lang.Object
{
    private static int size;
    private static boolean printMsgs;
    private static boolean printResults;

    static void <clinit>()
    {
        int temp$0;
        boolean temp$1, temp$2;

        temp$0 = 0;
        <bisort.BiSort: int size> = temp$0;
        temp$1 = 0;
        <bisort.BiSort: boolean printMsgs> = temp$1;
        temp$2 = 0;
        <bisort.BiSort: boolean printResults> = temp$2;
        return;
    }

    public static final void main(java.lang.String[])
    {
        java.lang.String[] args;
        boolean temp$0, temp$11, temp$12, temp$17, temp$21, temp$22;
        java.io.PrintStream temp$1, temp$13, temp$23, temp$29, temp$35, temp$41, temp$48, temp$57;
        java.lang.StringBuffer temp$2, temp$24, temp$30, temp$36, temp$42, temp$49;
        int temp$3, temp$6, sval, temp$8, temp$9, temp$15, temp$19;
        java.lang.String temp$4, temp$28, temp$34, temp$40, temp$47, temp$56;
        long start2, temp$5, end2, temp$10, start0, temp$14, end0, temp$16, start1, temp$18, end1, temp$20, temp$25, temp$31, temp$37, temp$43, temp$44, temp$50, temp$51, temp$52, temp$53;
        bisort.Value tree, temp$7;
        double temp$26, temp$27, temp$32, temp$33, temp$38, temp$39, temp$45, temp$46, temp$54, temp$55;

        args := @parameter0: java.lang.String[];
        staticinvoke <bisort.BiSort: void parseCmdLine(java.lang.String[])>(args);
        temp$0 = <bisort.BiSort: boolean printMsgs>;
        if temp$0 == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = <java.lang.System: java.io.PrintStream out>;
        temp$2 = new java.lang.StringBuffer;
        specialinvoke temp$2.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Bisort with ");
        temp$3 = <bisort.BiSort: int size>;
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(temp$3);
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(" values");
        temp$4 = virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$1.<java.io.PrintStream: void println(java.lang.String)>(temp$4);

     label1:
        nop;
        temp$5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        start2 = temp$5;
        temp$6 = <bisort.BiSort: int size>;
        temp$7 = staticinvoke <bisort.Value: bisort.Value createTree(int,int)>(temp$6, 12345768);
        tree = temp$7;
        temp$8 = staticinvoke <bisort.Value: int random(int)>(245867);
        temp$9 = temp$8 % 100;
        sval = temp$9;
        temp$10 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        end2 = temp$10;
        temp$11 = <bisort.BiSort: boolean printResults>;
        if temp$11 == 0 goto label3;

        goto label2;

     label2:
        nop;
        virtualinvoke tree.<bisort.Value: void inOrder()>();

     label3:
        nop;
        temp$12 = <bisort.BiSort: boolean printMsgs>;
        if temp$12 == 0 goto label5;

        goto label4;

     label4:
        nop;
        temp$13 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$13.<java.io.PrintStream: void println(java.lang.String)>("BEGINNING BITONIC SORT ALGORITHM HERE");

     label5:
        nop;
        temp$14 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        start0 = temp$14;
        temp$15 = virtualinvoke tree.<bisort.Value: int bisort(int,boolean)>(sval, 0);
        sval = temp$15;
        temp$16 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        end0 = temp$16;
        temp$17 = <bisort.BiSort: boolean printResults>;
        if temp$17 == 0 goto label7;

        goto label6;

     label6:
        nop;
        virtualinvoke tree.<bisort.Value: void inOrder()>();

     label7:
        nop;
        temp$18 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        start1 = temp$18;
        temp$19 = virtualinvoke tree.<bisort.Value: int bisort(int,boolean)>(sval, 1);
        sval = temp$19;
        temp$20 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        end1 = temp$20;
        temp$21 = <bisort.BiSort: boolean printResults>;
        if temp$21 == 0 goto label9;

        goto label8;

     label8:
        nop;
        virtualinvoke tree.<bisort.Value: void inOrder()>();

     label9:
        nop;
        temp$22 = <bisort.BiSort: boolean printMsgs>;
        if temp$22 == 0 goto label11;

        goto label10;

     label10:
        nop;
        temp$23 = <java.lang.System: java.io.PrintStream out>;
        temp$24 = new java.lang.StringBuffer;
        specialinvoke temp$24.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Creation time: ");
        temp$25 = end2 - start2;
        temp$26 = (double) temp$25;
        temp$27 = temp$26 / 1000.0;
        virtualinvoke temp$24.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(temp$27);
        temp$28 = virtualinvoke temp$24.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$23.<java.io.PrintStream: void println(java.lang.String)>(temp$28);
        temp$29 = <java.lang.System: java.io.PrintStream out>;
        temp$30 = new java.lang.StringBuffer;
        specialinvoke temp$30.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Time to sort forward = ");
        temp$31 = end0 - start0;
        temp$32 = (double) temp$31;
        temp$33 = temp$32 / 1000.0;
        virtualinvoke temp$30.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(temp$33);
        temp$34 = virtualinvoke temp$30.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$29.<java.io.PrintStream: void println(java.lang.String)>(temp$34);
        temp$35 = <java.lang.System: java.io.PrintStream out>;
        temp$36 = new java.lang.StringBuffer;
        specialinvoke temp$36.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Time to sort backward = ");
        temp$37 = end1 - start1;
        temp$38 = (double) temp$37;
        temp$39 = temp$38 / 1000.0;
        virtualinvoke temp$36.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(temp$39);
        temp$40 = virtualinvoke temp$36.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$35.<java.io.PrintStream: void println(java.lang.String)>(temp$40);
        temp$41 = <java.lang.System: java.io.PrintStream out>;
        temp$42 = new java.lang.StringBuffer;
        specialinvoke temp$42.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Total: ");
        temp$43 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        temp$44 = temp$43 - start2;
        temp$45 = (double) temp$44;
        temp$46 = temp$45 / 1000.0;
        virtualinvoke temp$42.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(temp$46);
        temp$47 = virtualinvoke temp$42.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$41.<java.io.PrintStream: void println(java.lang.String)>(temp$47);
        temp$48 = <java.lang.System: java.io.PrintStream out>;
        temp$49 = new java.lang.StringBuffer;
        specialinvoke temp$49.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Running time: ");
        temp$50 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        temp$51 = temp$50 - end2;
        temp$52 = <bisort.Value: long initialTime>;
        temp$53 = temp$51 - temp$52;
        temp$54 = (double) temp$53;
        temp$55 = temp$54 / 1000.0;
        virtualinvoke temp$49.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(temp$55);
        temp$56 = virtualinvoke temp$49.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke temp$48.<java.io.PrintStream: void println(java.lang.String)>(temp$56);

     label11:
        nop;
        temp$57 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$57.<java.io.PrintStream: void println(java.lang.String)>("Done!");
        return;
    }

    private static final void parseCmdLine(java.lang.String[])
    {
        java.lang.String[] args, temp$1, temp$5, temp$13;
        int i, temp$0, temp$2, temp$6, temp$8, temp$9, temp$11, temp$14, temp$16, temp$17, temp$18, temp$25;
        java.lang.String arg, temp$3, temp$7, temp$15;
        boolean temp$4, temp$10, temp$20, temp$21, temp$22, temp$23, temp$24;
        java.lang.Integer temp$12;
        java.lang.Error temp$19;

        args := @parameter0: java.lang.String[];
        i = 0;

     label0:
        nop;
        temp$0 = lengthof args;
        if i < temp$0 goto label1;

        goto label17;

     label1:
        nop;
        temp$1 = args;
        temp$2 = i;
        temp$3 = temp$1[temp$2];
        temp$4 = virtualinvoke temp$3.<java.lang.String: boolean startsWith(java.lang.String)>("-");
        if temp$4 == 0 goto label17;

        goto label2;

        goto label2;

     label2:
        nop;
        temp$5 = args;
        temp$6 = i;
        temp$7 = temp$5[temp$6];
        arg = temp$7;
        temp$8 = i;
        temp$9 = temp$8 + 1;
        i = temp$9;
        temp$10 = virtualinvoke arg.<java.lang.String: boolean equals(java.lang.Object)>("-s");
        if temp$10 == 0 goto label7;

        goto label3;

     label3:
        nop;
        temp$11 = lengthof args;
        if i < temp$11 goto label4;

        goto label5;

     label4:
        nop;
        temp$12 = new java.lang.Integer;
        temp$13 = args;
        temp$14 = i;
        temp$15 = temp$13[temp$14];
        specialinvoke temp$12.<java.lang.Integer: void <init>(java.lang.String)>(temp$15);
        temp$16 = virtualinvoke temp$12.<java.lang.Integer: int intValue()>();
        <bisort.BiSort: int size> = temp$16;
        temp$17 = i;
        temp$18 = temp$17 + 1;
        i = temp$18;
        goto label6;

     label5:
        nop;
        temp$19 = new java.lang.Error;
        specialinvoke temp$19.<java.lang.Error: void <init>(java.lang.String)>("-l requires the number of levels");
        throw temp$19;

     label6:
        nop;
        goto label16;

     label7:
        nop;
        temp$20 = virtualinvoke arg.<java.lang.String: boolean equals(java.lang.Object)>("-m");
        if temp$20 == 0 goto label9;

        goto label8;

     label8:
        nop;
        temp$21 = 1;
        <bisort.BiSort: boolean printMsgs> = temp$21;
        goto label15;

     label9:
        nop;
        temp$22 = virtualinvoke arg.<java.lang.String: boolean equals(java.lang.Object)>("-p");
        if temp$22 == 0 goto label11;

        goto label10;

     label10:
        nop;
        temp$23 = 1;
        <bisort.BiSort: boolean printResults> = temp$23;
        goto label14;

     label11:
        nop;
        temp$24 = virtualinvoke arg.<java.lang.String: boolean equals(java.lang.Object)>("-h");
        if temp$24 == 0 goto label13;

        goto label12;

     label12:
        nop;
        staticinvoke <bisort.BiSort: void usage()>();

     label13:
        nop;

     label14:
        nop;

     label15:
        nop;

     label16:
        nop;
        goto label0;

     label17:
        nop;
        temp$25 = <bisort.BiSort: int size>;
        if temp$25 == 0 goto label18;

        goto label19;

     label18:
        nop;
        staticinvoke <bisort.BiSort: void usage()>();

     label19:
        nop;
        return;
    }

    private static final void usage()
    {
        java.io.PrintStream temp$0, temp$1, temp$2, temp$3, temp$4;

        temp$0 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("usage: java BiSort -s <size> [-p] [-i] [-h]");
        temp$1 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$1.<java.io.PrintStream: void println(java.lang.String)>("    -s the number of values to sort");
        temp$2 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$2.<java.io.PrintStream: void println(java.lang.String)>("    -m (print informative messages)");
        temp$3 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$3.<java.io.PrintStream: void println(java.lang.String)>("    -p (print the binary tree after each step)");
        temp$4 = <java.lang.System: java.io.PrintStream err>;
        virtualinvoke temp$4.<java.io.PrintStream: void println(java.lang.String)>("    -h (print this message)");
        staticinvoke <java.lang.System: void exit(int)>(0);
        return;
    }

    public void <init>()
    {
        bisort.BiSort this;

        this := @this: bisort.BiSort;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
